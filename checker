package net.jpmchase.csorion.config.service;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpEntity;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.client.RestTemplate;

import com.jpmorgan.morato.boss.ida.client.blocking.IdaTokenProvider;

public class RequestHandlerClientServiceImplTest {

    @Mock
    private RestTemplate restTemplate; // must match field name in the class

    @Mock
    private RestTemplate c2dcRestTemplate; // must match field name in the class

    @Mock
    private IdaTokenProvider idaTokenProvider;

    @InjectMocks
    private RequestHandlerClientServiceImpl service;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        // Set private url field
        ReflectionTestUtils.setField(service, "url", "http://dummy-url");
    }

    @Test
    public void testPostQueryToTrino() {
        String query = "SELECT 1";
        String token = "mock-token";
        String expectedResponse = "OK";

        // Mock token provider
        when(idaTokenProvider.get().getAccessToken()).thenReturn(token);

        // Mock c2dcRestTemplate response
        when(c2dcRestTemplate.postForObject(
                eq("http://dummy-url/v1/statement"),
                any(HttpEntity.class),
                eq(String.class)
        )).thenReturn(expectedResponse);

        // Call method
        service.PostQueryToTrino(query);

        // Verify interactions
        verify(idaTokenProvider.get()).getAccessToken();
        verify(c2dcRestTemplate).postForObject(
                eq("http://dummy-url/v1/statement"),
                any(HttpEntity.class),
                eq(String.class)
        );
    }
}
