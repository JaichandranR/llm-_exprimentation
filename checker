import com.amazonaws.services.dynamodbv2.AmazonDynamoDBLockClient;
import com.amazonaws.services.dynamodbv2.LockItem;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.events.SQSEvent;
import software.amazon.awssdk.services.ssm.SsmClient;
import software.amazon.awssdk.services.ssm.model.GetParameterRequest;
import software.amazon.awssdk.services.ssm.model.GetParameterResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class HandlerTest {

    @Mock
    private AmazonDynamoDBLockClient dynamoDBLockClient;

    @Mock
    private SsmClient ssmClient;

    @Mock
    private Context lambdaContext;

    @InjectMocks
    private Handler handler;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    private SQSEvent createTestSQSEvent(String body) {
        SQSEvent.SQSMessage msg = new SQSEvent.SQSMessage();
        msg.setBody(body);
        SQSEvent event = new SQSEvent();
        event.setRecords(Collections.singletonList(msg));
        return event;
    }

    @Test
    void testHandleRequest_Success() {
        // Mock DynamoDB lock acquisition
        LockItem mockLock = mock(LockItem.class);
        when(dynamoDBLockClient.acquireLock(any())).thenReturn(mockLock);

        // Mock SSM parameter retrieval
        when(ssmClient.getParameter(any(GetParameterRequest.class)))
                .thenReturn(GetParameterResponse.builder()
                        .parameter(p -> p.name("testParam").value("testValue"))
                        .build());

        // Run the handler
        SQSEvent event = createTestSQSEvent("{\"key\":\"value\"}");
        handler.handleRequest(event, lambdaContext);

        // Verify AWS interactions
        verify(dynamoDBLockClient, times(1)).acquireLock(any());
        verify(ssmClient, times(1)).getParameter(any(GetParameterRequest.class));
    }

    @Test
    void testHandleRequest_LockAcquisitionFails() {
        when(dynamoDBLockClient.acquireLock(any())).thenReturn(null);

        SQSEvent event = createTestSQSEvent("{\"key\":\"value\"}");
        handler.handleRequest(event, lambdaContext);

        // Lock failure should avoid SSM call
        verify(ssmClient, never()).getParameter(any());
    }

    @Test
    void testHandleRequest_SsmThrowsException() {
        LockItem mockLock = mock(LockItem.class);
        when(dynamoDBLockClient.acquireLock(any())).thenReturn(mockLock);
        when(ssmClient.getParameter(any(GetParameterRequest.class)))
                .thenThrow(new RuntimeException("SSM Failure"));

        SQSEvent event = createTestSQSEvent("{\"key\":\"value\"}");
        assertDoesNotThrow(() -> handler.handleRequest(event, lambdaContext));

        verify(ssmClient, times(1)).getParameter(any(GetParameterRequest.class));
    }

    @Test
    void testHandleRequest_NullEvent() {
        assertDoesNotThrow(() -> handler.handleRequest(null, lambdaContext));
    }

    @Test
    void testHandleRequest_EmptySqsMessage() {
        SQSEvent event = new SQSEvent();
        event.setRecords(Collections.emptyList());
        assertDoesNotThrow(() -> handler.handleRequest(event, lambdaContext));
    }
}
