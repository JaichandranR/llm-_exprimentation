package net.jpmchase.csorion;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import software.amazon.awssdk.services.dynamodb.model.AttributeValue;
import software.amazon.awssdk.services.dynamodbv2.lockclient.AmazonDynamoDBLockClient;
import software.amazon.awssdk.services.dynamodbv2.lockclient.LockItem;
import software.amazon.awssdk.services.dynamodbv2.lockclient.LockItemConfig;
import software.amazon.awssdk.services.ssm.SsmClient;
import software.amazon.awssdk.services.ssm.model.GetParameterRequest;
import software.amazon.awssdk.services.ssm.model.GetParameterResponse;
import software.amazon.awssdk.services.sqs.model.Message;

import static org.junit.jupiter.api.Assertions.*;

public class HandlerTest {

    private AmazonDynamoDBLockClient lockClient;
    private SsmClient ssmClient;

    @BeforeEach
    public void setUp() {
        lockClient = mock(AmazonDynamoDBLockClient.class);
        ssmClient = mock(SsmClient.class);
    }

    @Test
    public void testAcquireLockSuccess() {
        LockItem mockLockItem = mock(LockItem.class);
        when(lockClient.acquireLock(any(LockItemConfig.class)))
            .thenReturn(Optional.of(mockLockItem));

        Optional<LockItem> result = lockClient.acquireLock(
            LockItemConfig.builder("test-key").build()
        );

        assertTrue(result.isPresent(), "Lock should be acquired");
    }

    @Test
    public void testAcquireLockFailure() {
        when(lockClient.acquireLock(any(LockItemConfig.class)))
            .thenReturn(Optional.empty());

        Optional<LockItem> result = lockClient.acquireLock(
            LockItemConfig.builder("missing-key").build()
        );

        assertFalse(result.isPresent(), "Lock should not be acquired");
    }

    @Test
    public void testGetSSMParameter() {
        GetParameterResponse mockResponse = GetParameterResponse.builder()
            .parameter(p -> p.name("paramName").value("paramValue"))
            .build();

        when(ssmClient.getParameter(any(GetParameterRequest.class)))
            .thenReturn(mockResponse);

        GetParameterResponse response = ssmClient.getParameter(
            GetParameterRequest.builder().name("paramName").build()
        );

        assertEquals("paramValue", response.parameter().value());
    }

    @Test
    public void testSQSMessageProcessing() {
        Message message = Message.builder()
            .messageId("123")
            .body("{\"test\":\"value\"}")
            .attributesEntry("Attribute1", "Value1")
            .build();

        assertEquals("123", message.messageId());
        assertTrue(message.body().contains("value"));
    }
}
