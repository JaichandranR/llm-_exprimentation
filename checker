package net.jpmchase.csorion;

import com.fasterxml.jackson.databind.ObjectMapper;
import net.jpmchase.csorion.message.DatasetStepFunctionDependency;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import software.amazon.awssdk.services.sfn.SfnClient;
import software.amazon.awssdk.services.ssm.SsmClient;
import software.amazon.awssdk.services.ssm.model.GetParameterRequest;
import software.amazon.awssdk.services.ssm.model.GetParameterResponse;
import software.amazon.awssdk.services.ssm.model.Parameter;

import java.util.Collections;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class HandlerTest {

    // Minimal stub to avoid importing the real AmazonDynamoDBLockClient
    interface AmazonDynamoDBLockClientMock {
        Object acquireLock(Object options);
    }

    private ObjectMapper objectMapper;
    private SsmClient ssmClient;
    private SfnClient sfnClient;
    private AmazonDynamoDBLockClientMock dynamoDBLockClient;
    private Handler handler;

    @BeforeEach
    void setUp() {
        objectMapper = mock(ObjectMapper.class);
        ssmClient = mock(SsmClient.class);
        sfnClient = mock(SfnClient.class);
        dynamoDBLockClient = mock(AmazonDynamoDBLockClientMock.class);

        handler = new Handler(
                objectMapper,
                ssmClient,
                sfnClient,
                dynamoDBLockClient, // use mock stub
                "AVAILABLE",
                5L,
                10L,
                "dataset-prefix",
                "dependency-sep",
                "blocking-sep",
                "last-updated-suffix"
        );
    }

    @Test
    void testAccept_withValidInput_shouldProcessMessage() throws Exception {
        // Create minimal fake SQS event without AWS class
        class SimpleSQSEvent {
            public java.util.List<SimpleMessage> records;
        }
        class SimpleMessage {
            public String body;
        }

        DatasetStepFunctionDependency dependency =
                new DatasetStepFunctionDependency("dataset1", "dep1", "token123", "2025-08-13T10:00:00Z", 5);

        // Mock ObjectMapper to return our dependency
        when(objectMapper.readValue(any(String.class), eq(DatasetStepFunctionDependency.class)))
                .thenReturn(dependency);

        // Mock SSM client to return "AVAILABLE"
        when(ssmClient.getParameter(any(GetParameterRequest.class))).thenReturn(
                GetParameterResponse.builder()
                        .parameter(Parameter.builder().value("AVAILABLE").build())
                        .build()
        );

        // Mock lock acquisition
        when(dynamoDBLockClient.acquireLock(any())).thenReturn(new Object());

        // Simulate handler call (youâ€™d adapt depending on your real accept method signature)
        // handler.accept(...);
    }
}
