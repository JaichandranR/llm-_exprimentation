@Test
void testAccept_withMissingRequiredFields_shouldSkipProcessing() throws Exception {
    DatasetStepFunctionDependency dependency = 
        new DatasetStepFunctionDependency("dataset1", null, null, null, 5);

    when(objectMapper.readValue(any(String.class), eq(DatasetStepFunctionDependency.class)))
        .thenReturn(dependency);

    GetParameterResponse mockResponse = GetParameterResponse.builder()
        .parameter(Parameter.builder().value("AVAILABLE").build())
        .build();
    when(ssmClient.getParameter(any(GetParameterRequest.class))).thenReturn(mockResponse);

    LockItem mockLockItem = mock(LockItem.class);
    when(dynamoDBLockClient.acquireLock(any())).thenReturn(mockLockItem);
    when(dynamoDBLockClient.releaseLock(mockLockItem)).thenReturn(true);

    SQSEvent.SQSMessage sqsMessage = new SQSEvent.SQSMessage();
    sqsMessage.setBody("{\"dataset\":\"dataset1\"}");
    SQSEvent event = new SQSEvent();
    event.setRecords(Collections.singletonList(sqsMessage));

    handler.accept(event);

    assertTrue(true, "Processing skipped due to missing fields");
}

@Test
void testAccept_withValidMessage_shouldProcess() throws Exception {
    DatasetStepFunctionDependency dependency = 
        new DatasetStepFunctionDependency("dataset1", "dep1", "token1", Instant.now(), 5);

    when(objectMapper.readValue(any(String.class), eq(DatasetStepFunctionDependency.class)))
        .thenReturn(dependency);

    GetParameterResponse mockResponse = GetParameterResponse.builder()
        .parameter(Parameter.builder().value("AVAILABLE").build())
        .build();
    when(ssmClient.getParameter(any(GetParameterRequest.class))).thenReturn(mockResponse);

    LockItem mockLockItem = mock(LockItem.class);
    when(dynamoDBLockClient.acquireLock(any())).thenReturn(mockLockItem);
    when(dynamoDBLockClient.releaseLock(mockLockItem)).thenReturn(true);

    SQSEvent.SQSMessage sqsMessage = new SQSEvent.SQSMessage();
    sqsMessage.setBody("{\"dataset\":\"dataset1\",\"dependency\":\"dep1\",\"stepFunctionCallbackToken\":\"token1\"}");
    SQSEvent event = new SQSEvent();
    event.setRecords(Collections.singletonList(sqsMessage));

    handler.accept(event);

    verify(stepFunctionClient).sendTaskSuccess(any(SendTaskSuccessRequest.class));
}

@Test
void testAccept_withUnavailableParameter_shouldSkip() throws Exception {
    DatasetStepFunctionDependency dependency = 
        new DatasetStepFunctionDependency("dataset1", "dep1", "token1", Instant.now(), 5);

    when(objectMapper.readValue(any(String.class), eq(DatasetStepFunctionDependency.class)))
        .thenReturn(dependency);

    GetParameterResponse mockResponse = GetParameterResponse.builder()
        .parameter(Parameter.builder().value("UNAVAILABLE").build())
        .build();
    when(ssmClient.getParameter(any(GetParameterRequest.class))).thenReturn(mockResponse);

    LockItem mockLockItem = mock(LockItem.class);
    when(dynamoDBLockClient.acquireLock(any())).thenReturn(mockLockItem);
    when(dynamoDBLockClient.releaseLock(mockLockItem)).thenReturn(true);

    SQSEvent.SQSMessage sqsMessage = new SQSEvent.SQSMessage();
    sqsMessage.setBody("{\"dataset\":\"dataset1\",\"dependency\":\"dep1\",\"stepFunctionCallbackToken\":\"token1\"}");
    SQSEvent event = new SQSEvent();
    event.setRecords(Collections.singletonList(sqsMessage));

    handler.accept(event);

    verify(stepFunctionClient, never()).sendTaskSuccess(any());
}
