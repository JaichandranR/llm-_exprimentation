import psycopg2
import requests
import numpy as np
import json

# PostgreSQL connection setup
def get_postgres_connection():
    try:
        conn = psycopg2.connect(
            host="your_postgres_host",
            user="your_postgres_user",
            password="your_postgres_password",
            database="your_postgres_db",
            port=5432
        )
        print("Database connection successful.")
        return conn
    except Exception as e:
        print(f"Error connecting to the database: {e}")
        raise

# Normalize embedding to unit norm
def normalize_embedding(embedding):
    norm = np.linalg.norm(embedding)
    if norm == 0:
        return embedding  # Return unchanged to avoid division by zero
    return [value / norm for value in embedding]

# Populate the embeddings table
def populate_mitre_embeddings_table(csv_data, API_URL, headers, conn):
    cur = conn.cursor()

    for row in csv_data:
        control_id = row["control_id"]
        source = row["source"]
        document = row["document"]

        # Chunk the document (implement chunk_text based on your requirement)
        chunks = chunk_text(document)

        for chunk_id, document_chunk in enumerate(chunks):
            try:
                # Generate embeddings using API
                response = requests.post(API_URL, data=json.dumps({
                    "model": "MetaLlama318BInstruct",
                    "prompt": f"{sysprompt} {document_chunk} {userprompt}",
                }), headers=headers, timeout=1000)

                if response.status_code == 200:
                    result = response.json()
                    embedding = result.get("context")

                    if embedding is None or not isinstance(embedding, list):
                        print(f"Invalid embedding received for control_id {control_id}, chunk_id {chunk_id}: {embedding}")
                        continue

                    # Adjust embedding dimensions
                    if len(embedding) > 768:
                        embedding = embedding[:768]
                    elif len(embedding) < 768:
                        embedding.extend([0.0] * (768 - len(embedding)))

                    # Ensure precision is limited to 10 decimals
                    embedding = [round(float(value), 10) for value in embedding]

                    # Normalize the embedding
                    embedding = normalize_embedding(embedding)

                    # Round again after normalization
                    embedding = [round(float(value), 10) for value in embedding]

                    # Insert into PostgreSQL
                    cur.execute(
                        """
                        INSERT INTO application.mitre_embeddings (control_id, chunk_id, source, documents, embedding)
                        VALUES (%s, %s, %s, %s, %s)
                        """,
                        (control_id, chunk_id, source, document_chunk, embedding)
                    )
                    conn.commit()  # Commit immediately after each insertion
                else:
                    print(f"Failed to compute embedding for control_id {control_id}, chunk_id {chunk_id}. API Response: {response.text}")

            except Exception as e:
                print(f"Error while processing control_id {control_id}, chunk_id {chunk_id}: {e}")
                conn.rollback()  # Rollback on error

    cur.close()

# Helper function to chunk text
def chunk_text(document, chunk_size=500):
    words = document.split()
    return [' '.join(words[i:i + chunk_size]) for i in range(0, len(words), chunk_size)]

# Example usage
if __name__ == "__main__":
    # Replace with your actual API URL and headers
    API_URL = "your_api_url"
    headers = {
        "Content-Type": "application/json",
        "x-api-key": "your_api_key"
    }
    sysprompt = "System prompt text here"
    userprompt = "User prompt text here"

    # Example CSV data (replace with actual reading logic)
    csv_data = [
        {
            "control_id": "M1022",
            "source": "example_source",
            "document": "This is an example document for testing."
        }
        # Add more rows as needed
    ]

    # Get database connection
    conn = get_postgres_connection()

    # Populate the embeddings table
    populate_mitre_embeddings_table(csv_data, API_URL, headers, conn)

    # Close the database connection
    conn.close()
