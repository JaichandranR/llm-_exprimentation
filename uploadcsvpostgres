import pandas as pd
import psycopg2
from sqlalchemy import create_engine
from sqlalchemy.exc import SQLAlchemyError
from ecdpawssession.session_builder import SessionBuilder

# Postgres connection setup
USERNAME = ''  # Leave blank for IAM authentication
DOMAIN = 'naeast'  # ENTER DOMAIN
ROLE_ARN = 'arn:aws:iam::ROLE/90177-aurora-app-admin'  # ENTER ROLE ARN
ENDPOINT = 'proxy-postgres-nlb.elb.us-east-1.amazonaws.com'  # ENTER DB NLB PROXY
CLUSTER = 'aurora-cluster.cluster-c1wayscsgqcd.us-east-1.rds.amazonaws.com'  # ENTER PG Cluster
PORT = '6160'  # ENTER PORT
USER = 'llmdbAuroraAppAdmin'  # ENTER USER
REGION = 'us-east-1'  # ENTER REGION
DBNAME = 'llmdb'  # ENTER DB

# Generate RDS token for authentication
session = SessionBuilder.cli(
    role_arn=ROLE_ARN, 
    region=REGION, 
    username=USERNAME, 
    domain=DOMAIN, 
    store_password=True
).with_auto_renew().build()

client = session.Client('rds')
token = client.generate_db_auth_token(
    DBHostname=CLUSTER, 
    Port=PORT, 
    DBUsername=USER, 
    Region=REGION
)

# Connect to the database
def get_postgres_connection():
    try:
        conn = psycopg2.connect(
            host=ENDPOINT,
            user=USER,
            password=token,
            port=PORT,
            database=DBNAME
        )
        print("Database connection successful.")
        return conn
    except Exception as e:
        print(f"Database connection failed due to {e}")
        raise

# List of CSV files and their corresponding Postgres tables
csv_to_table = {
    "MITRE_Mitigation.csv": "mitre_mitigation",
    "MITRE_SubTechnique.csv": "mitre_subtechnique",
    "MITRE_ID_Mapping.csv": "mitre_id_mapping",
    "MITRE_Tactic.csv": "mitre_tactic",
    "MITRE_Technique.csv": "mitre_technique"
}

# Load each CSV file into its corresponding table
def load_csv_to_postgres():
    conn = get_postgres_connection()
    try:
        # Use SQLAlchemy for bulk insertions
        engine = create_engine(f"postgresql+psycopg2://", creator=lambda: conn)

        for csv_file, table_name in csv_to_table.items():
            try:
                print(f"Loading {csv_file} into {table_name}...")

                # Read the CSV file
                df = pd.read_csv(csv_file)

                # Display the first few rows for verification (optional)
                print(df.head())

                # Insert data into Postgres table
                df.to_sql(table_name, engine, if_exists="replace", index=False)
                
                print(f"Loaded {len(df)} rows from {csv_file} into {table_name} successfully!")
            except FileNotFoundError:
                print(f"Error: {csv_file} not found. Please check the file path.")
            except SQLAlchemyError as e:
                print(f"Database error while loading {csv_file} into {table_name}: {e}")
            except Exception as e:
                print(f"An unexpected error occurred while processing {csv_file}: {e}")
    finally:
        conn.close()
        print("Database connection closed.")

# Run the script
if __name__ == "__main__":
    load_csv_to_postgres()
