import boto3
import sys
import traceback
from botocore.exceptions import ClientError
from pyspark.sql import SparkSession

# AWS Glue and S3 Configuration
region_name = "us-east-1"
database_name = "common_data_dev"
table_name = "87674_verum_application"
s3_bucket_name = "your-glue-warehouse-bucket"  # Replace with actual S3 bucket

def list_glue_tables():
    """ List databases and tables in Glue to verify metadata access """
    try:
        glue_client = boto3.client("glue", region_name=region_name)
        
        # List databases
        databases = glue_client.get_databases()
        print("\n‚úÖ Available Databases in Glue:")
        for db in databases['DatabaseList']:
            print(f" - {db['Name']}")

        # List tables in the database
        tables = glue_client.get_tables(DatabaseName=database_name)
        print(f"\n‚úÖ Tables in '{database_name}':")
        for table in tables['TableList']:
            print(f" - {table['Name']}")

        # Fetch table metadata
        response = glue_client.get_table(DatabaseName=database_name, Name=table_name)
        metadata_location = response["Table"]["StorageDescriptor"]["Location"]
        print(f"\n‚úÖ Iceberg Table Storage Location: {metadata_location}")

        return metadata_location

    except ClientError as e:
        print(f"[ERROR] Glue API Error: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"[ERROR] Unexpected error in list_glue_tables: {str(e)}")
        sys.exit(1)

def list_s3_objects(bucket_name, prefix=""):
    """ List objects in S3 to verify access to Iceberg storage """
    try:
        s3_client = boto3.client("s3")
        response = s3_client.list_objects_v2(Bucket=bucket_name, Prefix=prefix)

        if "Contents" in response:
            print(f"\n‚úÖ S3 Access Verified: Found {len(response['Contents'])} objects in {bucket_name}/{prefix}")
            for obj in response["Contents"][:10]:  # Show first 10 files
                print(f" - {obj['Key']} (Size: {obj['Size']} bytes)")
        else:
            print(f"\n[WARNING] No objects found in {bucket_name}/{prefix}. Check if the table is empty.")

    except ClientError as e:
        print(f"[ERROR] S3 Access Error: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"[ERROR] Unexpected error in list_s3_objects: {str(e)}")
        sys.exit(1)

def read_iceberg_table():
    """ Try reading Iceberg table using Spark """
    try:
        # Initialize Spark Session with Iceberg Support
        spark = SparkSession.builder \
            .appName("GlueIcebergDebug") \
            .config("spark.sql.catalog.glue_catalog", "org.apache.iceberg.spark.SparkCatalog") \
            .config("spark.sql.catalog.glue_catalog.catalog-impl", "org.apache.iceberg.aws.glue.GlueCatalog") \
            .config("spark.sql.catalog.glue_catalog.warehouse", f"s3://{s3_bucket_name}/") \
            .config("spark.sql.extensions", "org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions") \
            .getOrCreate()

        # Show databases & tables to check visibility
        print("\nüîç Verifying databases & tables in Spark...")
        spark.sql("SHOW DATABASES").show()
        spark.sql(f"SHOW TABLES IN {database_name}").show()

        # Check if Iceberg table has snapshots
        print("\nüîç Checking Iceberg table snapshots...")
        spark.sql(f"CALL glue_catalog.system.snapshot('common_data_dev.{table_name}')").show()

        # Try reading table using .load()
        iceberg_table = f"glue_catalog.{database_name}.{table_name}"
        print(f"\nüîç Attempting to read Iceberg table using `.load()`: {iceberg_table}")
        df = spark.read.format("iceberg").load(iceberg_table)
        df.show(10, truncate=False)

        # Try reading table using SQL
        print("\nüîç Attempting to read Iceberg table using SQL query...")
        spark.sql(f"SELECT * FROM glue_catalog.{database_name}.{table_name} LIMIT 10").show()

    except Exception as e:
        print(f"[ERROR] Failed to read Iceberg table: {str(e)}")
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    print("\nüîπ Step 1: Listing Glue Databases & Tables")
    metadata_location = list_glue_tables()

    print("\nüîπ Step 2: Checking S3 Access to Iceberg Data")
    list_s3_objects(s3_bucket_name, metadata_location.replace(f"s3://{s3_bucket_name}/", ""))

    print("\nüîπ Step 3: Reading Iceberg Table with Spark")
    read_iceberg_table()
