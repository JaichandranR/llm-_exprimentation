import boto3
import traceback
from botocore.exceptions import ClientError

def list_glue_databases_and_tables(glue_client, database_name, table_name, catalog_id):
    """ List Glue databases and tables to verify metadata access """
    try:
        dbs = glue_client.get_databases(CatalogId=catalog_id)
        print("‚úÖ Databases in AWS Glue Data Catalog:")
        for db in dbs["DatabaseList"]:
            print(f" - {db['Name']}")

        tables = glue_client.get_tables(DatabaseName=database_name, CatalogId=catalog_id)
        print(f"\n‚úÖ Tables in '{database_name}':")
        for table in tables["TableList"]:
            print(f" - {table['Name']}")

        print(f"\nüîç Fetching first 10 rows from table: {table_name}")

    except ClientError as e:
        print(f"[ERROR] AWS Glue Client error: {e}")
    except Exception as e:
        print(f"[ERROR] Unexpected error: {str(e)}")
        print(traceback.format_exc())

def fetch_first_10_rows(glue_client, database_name, table_name, catalog_id):
    """ Fetch first 10 rows from a Glue table using AWS Glue API """
    try:
        # Get table metadata
        response = glue_client.get_table(DatabaseName=database_name, Name=table_name, CatalogId=catalog_id)
        print(f"‚úÖ Table Found: {response['Table']['Name']}")

        # Get table schema
        columns = response["Table"]["StorageDescriptor"]["Columns"]
        column_names = [col["Name"] for col in columns]
        print(f"\nüîç Table Schema: {column_names}")

        # Check for partitions
        try:
            partitions = glue_client.get_partitions(DatabaseName=database_name, TableName=table_name, CatalogId=catalog_id)
            if "Partitions" in partitions and partitions["Partitions"]:
                print(f"\n‚úÖ Found {len(partitions['Partitions'])} partitions. Querying first partition...")
                first_partition_values = partitions["Partitions"][0]["Values"]
                print(f"üîπ First Partition Values: {first_partition_values}")

                # Construct query to fetch data from partition
                partition_filter = " AND ".join(
                    [f"{col}='{val}'" for col, val in zip(response["Table"]["PartitionKeys"], first_partition_values)]
                )
                query = f"SELECT * FROM {database_name}.{table_name} WHERE {partition_filter} LIMIT 10;"
                print(f"\nüîπ Querying partitioned table: {query}")
            else:
                print("\n‚ùå No partitions found or the table is not partitioned.")
                query = f"SELECT * FROM {database_name}.{table_name} LIMIT 10;"
                print(f"\nüîπ Querying non-partitioned table: {query}")

            # Use AWS Glue API to query the data (AWS Glue supports JDBC-like queries)
            query_results = glue_client.get_query_results(DatabaseName=database_name, QueryString=query, CatalogId=catalog_id)
            print(f"\n‚úÖ Query Results: {query_results}")

        except ClientError as e:
            print(f"[ERROR] AWS Glue Client error while fetching partitions: {e}")

    except ClientError as e:
        print(f"[ERROR] AWS Glue Client error: {e}")
    except Exception as e:
        print(f"[ERROR] An unexpected error occurred while fetching records: {str(e)}")
        print(traceback.format_exc())

def main():
    role_arn = "arn:aws:iam::691272445312:role/lancholers/services/AWSGlueServiceRole-90177-tf"
    session_name = "GlueJobRunnerSession-123"
    region_name = "us-east-1"
    catalog_id = "809616259930"
    database_name = "common_data_dev"
    table_name = "87674_verum_application"

    try:
        # Initialize AWS Glue Client
        glue_client = boto3.client("glue", region_name=region_name)

        # Step 1: List Databases & Tables
        list_glue_databases_and_tables(glue_client, database_name, table_name, catalog_id)

        # Step 2: Fetch First 10 Rows from Glue Table
        fetch_first_10_rows(glue_client, database_name, table_name, catalog_id)

    except Exception as e:
        print(f"[ERROR] An error occurred in main(): {str(e)}")
        print(traceback.format_exc())

if __name__ == "__main__":
    main()
