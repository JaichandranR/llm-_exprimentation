{% macro audit_rcc_codes(batch_size=50) %}
{# /* 
------------------------------------------------------------
Macro: audit_rcc_codes (Production version)
Purpose:
  - Enumerate all dbt models using graph context
  - Extract RCC + purge field + retention threshold
  - Validate retention_value against Jade retention master
  - Recreate final validated audit table (Trino compatible)
------------------------------------------------------------
*/ #}

{% if execute %}

    {# Step 1: Ensure base audit table exists #}
    {% set create_table_sql %}
        CREATE TABLE IF NOT EXISTS {{ this }} (
            model_name VARCHAR,
            schema_name VARCHAR,
            database_name VARCHAR,
            rcc_code VARCHAR,
            purge_date_field VARCHAR,
            retention_value VARCHAR,
            validation_status VARCHAR,
            status VARCHAR,
            message VARCHAR,
            scan_timestamp TIMESTAMP
        )
    {% endset %}
    {% do run_query(create_table_sql) %}

    {# Step 2: Get dbt graph context #}
    {% set nodes_dict = context.get('graph', {}).get('nodes', {}) %}
    {% if not nodes_dict %}
        {% do return("SELECT 'No dbt graph context found' AS info") %}
    {% endif %}

    {% set all_rows = [] %}

    {# Step 3: Loop over all models and extract post-hook retention info #}
    {% for node in nodes_dict.values() %}
        {% if node.resource_type == 'model' and not node.name.startswith('audit_') %}

            {% set post_hooks = node.config.get('post-hook', []) %}
            {% if post_hooks is string %}
                {% set post_hooks = [post_hooks] %}
            {% endif %}

            {% set retention_value = none %}
            {% if post_hooks | length > 0 %}
                {% set hook_text = post_hooks | join(' ') %}
                {% set search_str = "retention_threshold" %}
                {% if search_str in hook_text %}
                    {% set part = hook_text.split(search_str)[1] %}
                    {% set part = part.split("=>")[1] if "=>" in part else part %}
                    {% set part = part.split("'")[1] if "'" in part else part %}
                    {% set retention_value = part %}
                {% endif %}
            {% endif %}

            {% do all_rows.append({
                'model': node.name,
                'schema': node.schema,
                'database': node.database,
                'rcc_code': node.config.get('rcc_code', none),
                'purge_field': node.config.get('purge_date_field', none),
                'retention': retention_value,
                'validation_status': none,
                'status': 'PASS' if node.config.get('rcc_code', none) else 'FAIL',
                'message': 'RCC code defined' if node.config.get('rcc_code', none) else 'Missing RCC code in schema.yml',
                'timestamp': modules.datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }) %}
        {% endif %}
    {% endfor %}

    {% if all_rows | length == 0 %}
        {% do return("SELECT 'No models found to audit' AS info") %}
    {% endif %}

    {# Step 4: Truncate and insert all rows in batches #}
    {% do run_query("DELETE FROM " ~ this) %}

    {% for i in range(0, all_rows | length, batch_size) %}
        {% set batch = all_rows[i : i + batch_size] %}
        {% set insert_sql %}
            INSERT INTO {{ this }} (
                model_name,
                schema_name,
                database_name,
                rcc_code,
                purge_date_field,
                retention_value,
                validation_status,
                status,
                message,
                scan_timestamp
            )
            VALUES
            {%- for row in batch %}
                (
                    '{{ row.model }}',
                    '{{ row.schema }}',
                    '{{ row.database }}',
                    {% if row.rcc_code %}'{{ row.rcc_code }}'{% else %}NULL{% endif %},
                    {% if row.purge_field %}'{{ row.purge_field }}'{% else %}NULL{% endif %},
                    {% if row.retention %}'{{ row.retention }}'{% else %}NULL{% endif %},
                    NULL,
                    '{{ row.status }}',
                    '{{ row.message }}',
                    TIMESTAMP '{{ row.timestamp }}'
                ){% if not loop.last %},{% endif %}
            {%- endfor %}
        {% endset %}
        {% do run_query(insert_sql) %}
    {% endfor %}

    {# Step 5: Trino-compatible Jade retention validation #}

    {% set jade_validation_select %}
        SELECT
            a.model_name,
            a.schema_name,
            a.database_name,
            a.rcc_code,
            a.purge_date_field,
            a.retention_value,
            CASE
                WHEN a.retention_value IS NULL THEN 'SKIPPED'
                WHEN upper(j.retentionclasscodestatus) = 'ACTIVE'
                     AND regexp_extract(a.retention_value, '([0-9]+)') = CAST(j.ruleperiod AS VARCHAR)
                     AND (
                         upper(regexp_extract(a.retention_value, '([a-zA-Z]+)')) = upper(j.periodunitcode)
                         OR (
                             (upper(regexp_extract(a.retention_value, '([a-zA-Z]+)')) = 'D' AND j.periodunitcode IN ('DAY','D'))
                             OR (upper(regexp_extract(a.retention_value, '([a-zA-Z]+)')) = 'M' AND j.periodunitcode IN ('MONTH','M'))
                             OR (upper(regexp_extract(a.retention_value, '([a-zA-Z]+)')) = 'Y' AND j.periodunitcode IN ('YEAR','Y'))
                         )
                     )
                    THEN 'PASS'
                ELSE 'FAIL'
            END AS validation_status,
            a.status,
            a.message,
            a.scan_timestamp
        FROM {{ this }} a
        LEFT JOIN cosmos_nonhcd_iceberg_prototype.common_data_prototype.jade_retention_master j
          ON upper(j.retentionclasscodestatus) = 'ACTIVE'
    {% endset %}

    {# Step 6: Replace table with validated version #}
    {% set validated_table = this.database ~ '.' ~ this.schema ~ '.' ~ this.identifier ~ '__validated' %}

    {% do run_query("DROP TABLE IF EXISTS " ~ validated_table) %}
    {% do run_query("CREATE TABLE " ~ validated_table ~ " AS " ~ jade_validation_select | replace('\n', ' ')) %}
    {% do run_query("DROP TABLE IF EXISTS " ~ this.database ~ '.' ~ this.schema ~ '.' ~ this.identifier) %}
    {% do run_query("ALTER TABLE " ~ validated_table ~ " RENAME TO " ~ this.database ~ '.' ~ this.schema ~ '.' ~ this.identifier) %}

{% else %}
    {{ return("SELECT 'Macro executed in parse-only mode' AS info") }}
{% endif %}
{% endmacro %}
