{% macro purge_by_rcc(model_name) %}
{# /*
Macro: purge_by_rcc

Purpose:
1. Purges records from a destination table based on its configured Retention Class Code (RCC).
2. Fetches retention duration and unit (D/M/Y) from the `jade_data_retention` reference table.
3. Optionally filters records using an "inactive" flag if `status_field` is defined.
4. Logs all actions for visibility; can be used as part of scheduled dbt operations.

Arguments:
- model_name (string): Name of the dbt model whose retention rules will be applied.

Usage:
- Run from CLI:
    dbt run-operation purge_by_rcc --args '{"model_name": "orders"}'

- Or call within another macro:
    {% do purge_by_rcc('orders') %}

Behavior:
- Reads `rcc_code` and optional `status_field` from the model’s `schema.yml` config.
- Looks up the corresponding retention period and unit in `jade_data_retention`.
- Converts that unit (D, M, Y) into an SQL interval for date comparison.
- Deletes rows older than the retention period.
- If `status_field` is present, deletes only records marked inactive.

Expected Columns:
- Target model must contain a date field (e.g., `event_date`) for age comparison.
- Reference table must contain:
  - `classcode` (RCC identifier)
  - `ruleperiod`
  - `periodunitcode` (D/M/Y)

Output:
- Logs retention duration and purge completion details in dbt logs.

Notes:
- This macro modifies data; ensure it’s executed in controlled environments.
- Can be paired with `audit_rcc_codes` macro for pre-purge validation.
*/ #}

    {% set rcc_code = config.get('rcc_code', none) %}
    {% set status_field = config.get('status_field', none) %}

    {% if not rcc_code %}
        {{ exceptions.raise_compiler_error("No RCC code defined for model: " ~ model_name) }}
    {% endif %}

    {# Fetch ruleperiod and unit #}
    {% set retention_query %}
        select ruleperiod, periodunitcode
        from {{ ref('jade_data_retention') }}
        where classcode = '{{ rcc_code }}'
        limit 1
    {% endset %}

    {% set results = run_query(retention_query) %}
    {% if not results or results.rows | length == 0 %}
        {{ exceptions.raise_compiler_error("No retention rule found for RCC code: " ~ rcc_code) }}
    {% endif %}

    {% set ruleperiod = results.columns[0].values()[0] %}
    {% set periodunit = results.columns[1].values()[0] %}

    {# Convert to SQL interval #}
    {% if periodunit == 'D' %}
        {% set interval_expr = "interval '" ~ ruleperiod ~ "' day" %}
    {% elif periodunit == 'M' %}
        {% set interval_expr = "interval '" ~ ruleperiod ~ "' month" %}
    {% elif periodunit == 'Y' %}
        {% set interval_expr = "interval '" ~ ruleperiod ~ "' year" %}
    {% else %}
        {{ exceptions.raise_compiler_error("Unsupported period unit: " ~ periodunit) }}
    {% endif %}

    {# Build delete logic dynamically #}
    {% if status_field %}
        delete from {{ this }}
        where {{ status_field }} = false
          and event_date < current_date - {{ interval_expr }};
    {% else %}
        delete from {{ this }}
        where event_date < current_date - {{ interval_expr }};
    {% endif %}

{% endmacro %}












{% macro audit_rcc_codes() %}
{# /*
Macro: audit_rcc_codes

Purpose:
1. Scans all dbt models in the project to verify if the `rcc_code` configuration exists and is valid.
2. Cross-checks each `rcc_code` against the `jade_data_retention` reference table.
3. Logs models missing the configuration or using invalid RCC codes.

Arguments:
- None (automatically iterates over all models in the current dbt project).

Usage:
- Run from CLI:
    dbt run-operation audit_rcc_codes
- Or call from another macro:
    {% do audit_rcc_codes() %}

Behavior:
- Iterates through all `graph.nodes` where `resource_type == 'model'`.
- Checks:
  - Missing `rcc_code` configuration in schema.yml.
  - Invalid `rcc_code` not present in `jade_data_retention`.
- Logs results in three categories:
  - ⚠️ Missing RCC codes
  - ❌ Invalid RCC codes
  - ✅ Valid RCC codes

Expected Tables:
- Reference Table: `jade_data_retention`
  - Columns: `classcode`, `ruleperiod`, `periodunitcode`, `effectiveclasscode`, `retentionclasscodestatus`

Output:
- dbt log entries showing:
  - Missing RCC codes in schema.yml.
  - Invalid RCC codes not found in reference table.
  - Valid RCC codes verified successfully.

Notes:
- Read-only; does not modify configs or data.
- Recommended to run before purge operations for data governance validation.
*/ #}

    {% set missing_rcc = [] %}
    {% set invalid_rcc = [] %}
    {% set valid_rcc = [] %}

    {% for node in graph.nodes.values() %}
        {% if node.resource_type == 'model' %}
            {% set rcc_code = node.config.get('rcc_code', none) %}
            {% if not rcc_code %}
                {% do missing_rcc.append(node.name) %}
            {% else %}
                {% set validate_query %}
                    select count(*) as cnt
                    from {{ ref('jade_data_retention') }}
                    where classcode = '{{ rcc_code }}'
                {% endset %}
                {% set results = run_query(validate_query) %}
                {% if results and results.columns[0].values()[0] | int > 0 %}
                    {% do valid_rcc.append(node.name) %}
                {% else %}
                    {% do invalid_rcc.append(node.name ~ " (" ~ rcc_code ~ ")") %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if missing_rcc | length > 0 %}
        {{ log("⚠️ Missing RCC code in schema.yml for: " ~ (missing_rcc | join(', ')), info=True) }}
    {% endif %}

    {% if invalid_rcc | length > 0 %}
        {{ log("❌ Invalid RCC codes (not found in jade_data_retention): " ~ (invalid_rcc | join(', ')), info=True) }}
    {% endif %}

    {% if valid_rcc | length > 0 %}
        {{ log("✅ Models with valid RCC codes: " ~ (valid_rcc | join(', ')), info=True) }}
    {% endif %}

{% endmacro %}




