{% macro purge_by_rcc(model_name, execute_delete=False) %}
{# /*
Macro: purge_by_rcc

Purpose:
1. Checks RCC configuration for the given model.
2. Finds the retention rule from the 88057_jade_data_retention table.
3. Identifies rows exceeding retention period using the purge_date_field.
4. Optionally deletes eligible rows if `execute_delete=True`.

Arguments:
- model_name (string): Name of the dbt model (as defined in schema.yml).
- execute_delete (boolean, optional): Whether to perform DELETE instead of audit-only (default=False).

Usage:
dbt run-operation purge_by_rcc --args "{\"model_name\": \"110930_ame_co_driver\", \"execute_delete\": true}"
*/ #}

    {% set node = graph.nodes.values() | selectattr('name', 'equalto', model_name) | first %}
    {% if not node %}
        {{ exceptions.raise_compiler_error("Model " ~ model_name ~ " not found in project.") }}
    {% endif %}

    {% set rcc_code = node.config.get('rcc_code') %}
    {% set purge_date_field = node.config.get('purge_date_field', 'cosmosingestedat') %}
    {% if not rcc_code %}
        {{ exceptions.raise_compiler_error("No RCC code defined for model: " ~ model_name) }}
    {% endif %}

    {% set retention_query %}
        SELECT ruleperiod, periodunitcode
        FROM {{ ref('88057_jade_data_retention') }}
        WHERE classcode = '{{ rcc_code }}'
          AND retentionclasscodestatus = 'Active'
    {% endset %}

    {% set retention = run_query(retention_query).columns %}
    {% if retention | length == 0 %}
        {{ exceptions.raise_compiler_error("No retention record found for RCC " ~ rcc_code) }}
    {% endif %}

    {% set ruleperiod = run_query(retention_query)[0][0] %}
    {% set unit = run_query(retention_query)[0][1] %}
    {% set full_table_name = node.database ~ '.' ~ node.schema ~ '."' ~ node.name ~ '"' %}

    {{ log("RCC purge configuration for " ~ model_name ~ ": RCC=" ~ rcc_code ~ ", ruleperiod=" ~ ruleperiod ~ ", unit=" ~ unit ~ ", purge_date_field=" ~ purge_date_field, info=True) }}
    {{ log("Target table: " ~ full_table_name, info=True) }}

    {% set eligible_count_query %}
        SELECT COUNT(*) AS cnt
        FROM {{ full_table_name }}
        WHERE {{ purge_date_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' {{ unit }}
    {% endset %}

    {% set eligible_count = run_query(eligible_count_query).columns[0].values()[0] %}
    {{ log("Rows eligible for deletion: " ~ eligible_count, info=True) }}

    {% if execute_delete %}
        {% set delete_sql %}
            DELETE FROM {{ full_table_name }}
            WHERE {{ purge_date_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' {{ unit }}
        {% endset %}
        {{ log("Executing DELETE on table " ~ full_table_name, info=True) }}
        {% do run_query(delete_sql) %}
    {% else %}
        {{ log("Dry run only: no DELETE executed (set execute_delete=True to purge).", info=True) }}
    {% endif %}

    {{ log("Purge completed for model: " ~ model_name, info=True) }}
{% endmacro %}
























{% macro audit_rcc_codes() %}
{# /*
Macro: audit_rcc_codes

Purpose:
1. Scans all dbt models in the project to verify if the `rcc_code` configuration exists and is valid.
2. Cross-checks each `rcc_code` against the `jade_data_retention` reference table.
3. Logs models missing the configuration or using invalid RCC codes.

Arguments:
- None (automatically iterates over all models in the current dbt project).

Usage:
- Run from CLI:
    dbt run-operation audit_rcc_codes
- Or call from another macro:
    {% do audit_rcc_codes() %}

Behavior:
- Iterates through all `graph.nodes` where `resource_type == 'model'`.
- Checks:
  - Missing `rcc_code` configuration in schema.yml.
  - Invalid `rcc_code` not present in `jade_data_retention`.
- Logs results in three categories:
  - ⚠️ Missing RCC codes
  - ❌ Invalid RCC codes
  - ✅ Valid RCC codes

Expected Tables:
- Reference Table: `jade_data_retention`
  - Columns: `classcode`, `ruleperiod`, `periodunitcode`, `effectiveclasscode`, `retentionclasscodestatus`

Output:
- dbt log entries showing:
  - Missing RCC codes in schema.yml.
  - Invalid RCC codes not found in reference table.
  - Valid RCC codes verified successfully.

Notes:
- Read-only; does not modify configs or data.
- Recommended to run before purge operations for data governance validation.
*/ #}

    {% set missing_rcc = [] %}
    {% set invalid_rcc = [] %}
    {% set valid_rcc = [] %}

    {% for node in graph.nodes.values() %}
        {% if node.resource_type == 'model' %}
            {% set rcc_code = node.config.get('rcc_code', none) %}
            {% if not rcc_code %}
                {% do missing_rcc.append(node.name) %}
            {% else %}
                {% set validate_query %}
                    select count(*) as cnt
                    from {{ ref('jade_data_retention') }}
                    where classcode = '{{ rcc_code }}'
                {% endset %}
                {% set results = run_query(validate_query) %}
                {% if results and results.columns[0].values()[0] | int > 0 %}
                    {% do valid_rcc.append(node.name) %}
                {% else %}
                    {% do invalid_rcc.append(node.name ~ " (" ~ rcc_code ~ ")") %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if missing_rcc | length > 0 %}
        {{ log("⚠️ Missing RCC code in schema.yml for: " ~ (missing_rcc | join(', ')), info=True) }}
    {% endif %}

    {% if invalid_rcc | length > 0 %}
        {{ log("❌ Invalid RCC codes (not found in jade_data_retention): " ~ (invalid_rcc | join(', ')), info=True) }}
    {% endif %}

    {% if valid_rcc | length > 0 %}
        {{ log("✅ Models with valid RCC codes: " ~ (valid_rcc | join(', ')), info=True) }}
    {% endif %}

{% endmacro %}




