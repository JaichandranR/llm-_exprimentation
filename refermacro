{% macro purge_by_rcc(model_name) %}
{# /*
Macro: purge_by_rcc

Purpose:
1. Purges records from a destination model based on its configured Retention Class Code (RCC).
2. Fetches the retention period and unit (D/M/Y) from the `jade_data_retention` reference table.
3. Dynamically reads model-level configuration (rcc_code, purge_date_field, status_field) 
   from the dbt project manifest via `graph.nodes`.
4. Supports automatic retention enforcement and audit logging.

Arguments:
- model_name (string): Name of the dbt model for which retention rules will be applied.

Usage:
- Run from CLI (Windows / PowerShell):
    dbt run-operation purge_by_rcc --args "{\"model_name\": \"110930_ame_bulk_cp_driver_app_assets\"}"

- Run from CLI (Linux / macOS):
    dbt run-operation purge_by_rcc --args '{"model_name": "110930_ame_bulk_cp_driver_app_assets"}'

Behavior:
- Reads `rcc_code`, `purge_date_field`, and optional `status_field` from the model’s `schema.yml` config.
- Queries the `jade_data_retention` table to determine the applicable retention interval.
- Builds and executes a `DELETE` statement removing records older than the retention threshold.
- If a `status_field` is present, only deletes inactive rows.

Expected Columns:
- Target model must include a date column (configured as `purge_date_field`) for retention comparison.
- Reference table must contain:
    - `classcode` (RCC identifier)
    - `ruleperiod`
    - `periodunitcode` (D/M/Y)

Output:
- Logs all parameters and completion status to the dbt run logs.
- Does not require manual updates for each model.

Notes:
- This macro performs destructive operations (DELETE). Use only with appropriate permissions.
- Use the `audit_rcc_codes` macro before running to validate configuration completeness.
*/ #}

    {{ log("🔹 Running purge_by_rcc for model: " ~ model_name, info=True) }}

{# /*
STEP 1 — Resolve model configuration from dbt graph
*/ #}
    {% set node = graph.nodes.values() | selectattr('name', 'equalto', model_name) | list | first %}
    {% if not node %}
        {{ exceptions.raise_compiler_error("Model not found in dbt graph: " ~ model_name) }}
    {% endif %}

    {% set rcc_code = node.config.get('rcc_code', none) %}
    {% set status_field = node.config.get('status_field', none) %}
    {% set date_field = node.config.get('purge_date_field', 'event_date') %}

    {% if not rcc_code %}
        {{ exceptions.raise_compiler_error("No RCC code defined for model: " ~ model_name) }}
    {% endif %}

{# /*
STEP 2 — Fetch retention rules from jade_data_retention
*/ #}
    {% set retention_query %}
        select ruleperiod, periodunitcode
        from {{ ref('jade_data_retention') }}
        where classcode = '{{ rcc_code }}'
          and retentionclasscodestatus = 'A'
        limit 1
    {% endset %}

    {% set results = run_query(retention_query) %}
    {% if not results or results.rows | length == 0 %}
        {{ exceptions.raise_compiler_error("No active retention rule found for RCC code: " ~ rcc_code) }}
    {% endif %}

    {% set ruleperiod = results.columns[0].values()[0] %}
    {% set periodunit = results.columns[1].values()[0] %}

{# /*
STEP 3 — Convert to SQL interval
*/ #}
    {% if periodunit == 'D' %}
        {% set interval_expr = "interval '" ~ ruleperiod ~ "' day" %}
    {% elif periodunit == 'M' %}
        {% set interval_expr = "interval '" ~ ruleperiod ~ "' month" %}
    {% elif periodunit == 'Y' %}
        {% set interval_expr = "interval '" ~ ruleperiod ~ "' year" %}
    {% else %}
        {{ exceptions.raise_compiler_error("Unsupported period unit: " ~ periodunit) }}
    {% endif %}

    {{ log("🧩 RCC purge configuration for " ~ model_name ~ 
           ": RCC=" ~ rcc_code ~ 
           ", ruleperiod=" ~ ruleperiod ~ 
           ", unit=" ~ periodunit ~ 
           ", purge_date_field=" ~ date_field ~
           (status_field and (", status_field=" ~ status_field) or ""), info=True) }}

{# /*
STEP 4 — Preview affected rows (audit count)
*/ #}
    {% set count_query %}
        select count(*) as cnt
        from {{ this }}
        where {{ date_field }} < current_date - {{ interval_expr }}
        {% if status_field %} and {{ status_field }} = false {% endif %}
    {% endset %}

    {% set preview = run_query(count_query) %}
    {% set delete_count = preview.columns[0].values()[0] if preview and preview.rows | length > 0 else 0 %}
    {{ log("📊 Rows eligible for deletion: " ~ delete_count, info=True) }}

{# /*
STEP 5 — Execute purge
*/ #}
    {% if status_field %}
        delete from {{ this }}
        where {{ status_field }} = false
          and {{ date_field }} < current_date - {{ interval_expr }};
    {% else %}
        delete from {{ this }}
        where {{ date_field }} < current_date - {{ interval_expr }};
    {% endif %}

    {{ log("✅ Purge completed for model: " ~ model_name, info=True) }}

{% endmacro %}






















{% macro audit_rcc_codes() %}
{# /*
Macro: audit_rcc_codes

Purpose:
1. Scans all dbt models in the project to verify if the `rcc_code` configuration exists and is valid.
2. Cross-checks each `rcc_code` against the `jade_data_retention` reference table.
3. Logs models missing the configuration or using invalid RCC codes.

Arguments:
- None (automatically iterates over all models in the current dbt project).

Usage:
- Run from CLI:
    dbt run-operation audit_rcc_codes
- Or call from another macro:
    {% do audit_rcc_codes() %}

Behavior:
- Iterates through all `graph.nodes` where `resource_type == 'model'`.
- Checks:
  - Missing `rcc_code` configuration in schema.yml.
  - Invalid `rcc_code` not present in `jade_data_retention`.
- Logs results in three categories:
  - ⚠️ Missing RCC codes
  - ❌ Invalid RCC codes
  - ✅ Valid RCC codes

Expected Tables:
- Reference Table: `jade_data_retention`
  - Columns: `classcode`, `ruleperiod`, `periodunitcode`, `effectiveclasscode`, `retentionclasscodestatus`

Output:
- dbt log entries showing:
  - Missing RCC codes in schema.yml.
  - Invalid RCC codes not found in reference table.
  - Valid RCC codes verified successfully.

Notes:
- Read-only; does not modify configs or data.
- Recommended to run before purge operations for data governance validation.
*/ #}

    {% set missing_rcc = [] %}
    {% set invalid_rcc = [] %}
    {% set valid_rcc = [] %}

    {% for node in graph.nodes.values() %}
        {% if node.resource_type == 'model' %}
            {% set rcc_code = node.config.get('rcc_code', none) %}
            {% if not rcc_code %}
                {% do missing_rcc.append(node.name) %}
            {% else %}
                {% set validate_query %}
                    select count(*) as cnt
                    from {{ ref('jade_data_retention') }}
                    where classcode = '{{ rcc_code }}'
                {% endset %}
                {% set results = run_query(validate_query) %}
                {% if results and results.columns[0].values()[0] | int > 0 %}
                    {% do valid_rcc.append(node.name) %}
                {% else %}
                    {% do invalid_rcc.append(node.name ~ " (" ~ rcc_code ~ ")") %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if missing_rcc | length > 0 %}
        {{ log("⚠️ Missing RCC code in schema.yml for: " ~ (missing_rcc | join(', ')), info=True) }}
    {% endif %}

    {% if invalid_rcc | length > 0 %}
        {{ log("❌ Invalid RCC codes (not found in jade_data_retention): " ~ (invalid_rcc | join(', ')), info=True) }}
    {% endif %}

    {% if valid_rcc | length > 0 %}
        {{ log("✅ Models with valid RCC codes: " ~ (valid_rcc | join(', ')), info=True) }}
    {% endif %}

{% endmacro %}




