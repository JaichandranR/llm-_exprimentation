{% macro purge_by_rcc(args) %}
{# /*
Macro: purge_by_rcc
====================

Purpose:
---------
Purges records from a given model table based on its RCC retention configuration.
This macro:
1. Looks up the model’s `rcc_code` and `purge_date_field` from its schema.yml config.
2. Fetches the retention period for that RCC code from the `88057_jade_data_retention` table.
3. Deletes records from the model table whose purge_date_field exceeds the retention threshold.
4. Logs detailed output to dbt logs and console for visibility.

Arguments:
-----------
args (dict): Dictionary passed from dbt command via --args
              Example: dbt run-operation purge_by_rcc --args "{'model_name': '110930_ame_co_driver'}"

Usage:
------
dbt run-operation purge_by_rcc --args "{'model_name': '110930_ame_co_driver'}"

Expected Config in schema.yml:
-------------------------------
models:
  - name: 110930_ame_co_driver
    config:
      rcc_code: DBU090D
      purge_date_field: cosmosingestedat

Assumptions:
-------------
- Retention table: cosmos_nonhcd_iceberg_prototype.common_data_prototype.88057_jade_data_retention
- Columns required: effectiveclasscode, ruleperiod, classcode
- Only DAY-based retention is supported (unit removed for simplicity)
*/ #}

    {% set model_name = args.get('model_name') %}

    {{ log("▶ Running purge_by_rcc for model: " ~ model_name, info=True) }}

    {# /* Retrieve node (model metadata) */ #}
    {% set node = graph.nodes.values() | selectattr('name', 'equalto', model_name) | first %}

    {% if not node %}
        {{ exceptions.raise_compiler_error("Model not found in project: " ~ model_name) }}
    {% endif %}

    {# /* Retrieve model-level configs */ #}
    {% set rcc_code = node.config.get('rcc_code') %}
    {% set purge_date_field = node.config.get('purge_date_field') %}

    {% if not rcc_code %}
        {{ exceptions.raise_compiler_error("No RCC code defined for model: " ~ model_name) }}
    {% endif %}

    {% if not purge_date_field %}
        {{ exceptions.raise_compiler_error("No purge_date_field defined for model: " ~ model_name) }}
    {% endif %}

    {# /* Build full table name (quoted for numeric model names) */ #}
    {% set full_table_name = node.database ~ '.' ~ node.schema ~ '."' ~ node.name ~ '"' %}

    {# /* Look up retention rule for this RCC code */ #}
    {% set retention_query %}
        SELECT ruleperiod
        FROM cosmos_nonhcd_iceberg_prototype.common_data_prototype."88057_jade_data_retention"
        WHERE effectiveclasscode = '{{ rcc_code }}'
        LIMIT 1
    {% endset %}

    {% set retention = run_query(retention_query) %}
    {% if retention is none or retention.columns | length == 0 or retention.rows | length == 0 %}
        {{ exceptions.raise_compiler_error("No retention rule found for RCC: " ~ rcc_code) }}
    {% endif %}

    {% set ruleperiod = retention.rows[0][0] %}

    {{ log("🧩 RCC purge configuration for " ~ model_name ~ ": RCC=" ~ rcc_code ~
           ", ruleperiod=" ~ ruleperiod ~ ", purge_date_field=" ~ purge_date_field, info=True) }}

    {{ log("📘 Target table: " ~ full_table_name, info=True) }}

    {# /* Count eligible rows for purge */ #}
    {% set count_query %}
        SELECT COUNT(*) AS cnt
        FROM {{ full_table_name }}
        WHERE {{ purge_date_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' DAY
    {% endset %}

    {% set count_result = run_query(count_query) %}
    {% set eligible_rows = count_result.rows[0][0] if count_result and count_result.rows|length > 0 else 0 %}

    {{ log("🧮 Rows eligible for deletion: " ~ eligible_rows, info=True) }}

    {% if eligible_rows > 0 %}
        {# /* Perform purge */ #}
        {% set delete_query %}
            DELETE FROM {{ full_table_name }}
            WHERE {{ purge_date_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' DAY
        {% endset %}

        {{ run_query(delete_query) }}
        {{ log("✅ Purge completed for model: " ~ model_name, info=True) }}
    {% else %}
        {{ log("ℹ️ No records eligible for purge for model: " ~ model_name, info=True) }}
    {% endif %}

{% endmacro %}

























{% macro audit_rcc_codes() %}
{# /*
Macro: audit_rcc_codes

Purpose:
1. Scans all dbt models in the project to verify if the `rcc_code` configuration exists and is valid.
2. Cross-checks each `rcc_code` against the `jade_data_retention` reference table.
3. Logs models missing the configuration or using invalid RCC codes.

Arguments:
- None (automatically iterates over all models in the current dbt project).

Usage:
- Run from CLI:
    dbt run-operation audit_rcc_codes
- Or call from another macro:
    {% do audit_rcc_codes() %}

Behavior:
- Iterates through all `graph.nodes` where `resource_type == 'model'`.
- Checks:
  - Missing `rcc_code` configuration in schema.yml.
  - Invalid `rcc_code` not present in `jade_data_retention`.
- Logs results in three categories:
  - ⚠️ Missing RCC codes
  - ❌ Invalid RCC codes
  - ✅ Valid RCC codes

Expected Tables:
- Reference Table: `jade_data_retention`
  - Columns: `classcode`, `ruleperiod`, `periodunitcode`, `effectiveclasscode`, `retentionclasscodestatus`

Output:
- dbt log entries showing:
  - Missing RCC codes in schema.yml.
  - Invalid RCC codes not found in reference table.
  - Valid RCC codes verified successfully.

Notes:
- Read-only; does not modify configs or data.
- Recommended to run before purge operations for data governance validation.
*/ #}

    {% set missing_rcc = [] %}
    {% set invalid_rcc = [] %}
    {% set valid_rcc = [] %}

    {% for node in graph.nodes.values() %}
        {% if node.resource_type == 'model' %}
            {% set rcc_code = node.config.get('rcc_code', none) %}
            {% if not rcc_code %}
                {% do missing_rcc.append(node.name) %}
            {% else %}
                {% set validate_query %}
                    select count(*) as cnt
                    from {{ ref('jade_data_retention') }}
                    where classcode = '{{ rcc_code }}'
                {% endset %}
                {% set results = run_query(validate_query) %}
                {% if results and results.columns[0].values()[0] | int > 0 %}
                    {% do valid_rcc.append(node.name) %}
                {% else %}
                    {% do invalid_rcc.append(node.name ~ " (" ~ rcc_code ~ ")") %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if missing_rcc | length > 0 %}
        {{ log("⚠️ Missing RCC code in schema.yml for: " ~ (missing_rcc | join(', ')), info=True) }}
    {% endif %}

    {% if invalid_rcc | length > 0 %}
        {{ log("❌ Invalid RCC codes (not found in jade_data_retention): " ~ (invalid_rcc | join(', ')), info=True) }}
    {% endif %}

    {% if valid_rcc | length > 0 %}
        {{ log("✅ Models with valid RCC codes: " ~ (valid_rcc | join(', ')), info=True) }}
    {% endif %}

{% endmacro %}




