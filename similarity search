def similarity_search(query, top_k=5):
    # Generate the embedding for the query using the API
    query_embedding = get_embedding_from_model(query)

    # Ensure query_embedding is 1-D
    if not isinstance(query_embedding, list):
        raise ValueError("Query embedding is not in the expected list format.")
    
    # Fetch embeddings from the database
    conn = get_postgres_connection()
    cursor = conn.cursor()

    # Query the embeddings table
    query = "SELECT control_id, chunk_id, embedding FROM application.mitre_embeddings"
    cursor.execute(query)
    records = cursor.fetchall()
    
    # Process embeddings and compute similarity
    results = []
    for record in records:
        control_id, chunk_id, embedding_str = record
        
        # Convert the stored embedding string to a list
        try:
            embedding = json.loads(embedding_str)
        except json.JSONDecodeError:
            print(f"Invalid embedding format for control_id {control_id}, chunk_id {chunk_id}")
            continue
        
        # Ensure both embeddings are 1-D
        similarity = 1 - cosine(
            np.array(query_embedding, dtype=float).flatten(),
            np.array(embedding, dtype=float).flatten()
        )
        
        results.append((control_id, chunk_id, similarity))
    
    # Sort by similarity and return top_k results
    results = sorted(results, key=lambda x: x[2], reverse=True)
    cursor.close()
    conn.close()

    return results[:top_k]
