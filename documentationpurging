This framework enforces data retention and purging policies across multiple DBT models using RCC (Retention Control Code) rules defined in the JADE Master Catalog.
The design ensures:

Compliance with data lifecycle management policies

Unified control of purge intervals

Full audit trail for traceability

Independent verification via validation audits

The solution consists of three integrated flows:

Flow	Description	Primary Table
Flow 1: RCC Source Sync from JADE API	Extracts and stores retention policies from JADE	88057_jade_data_retention
Flow 2: Data Purge by RCC Rule	Purges data older than the RCC-defined interval	purge_audit
Flow 3: RCC Validation and Compliance Audit	Validates RCC tagging and retention compliance	audit_rcc_codes
üß© 2. Flow 1 ‚Äì RCC Source Sync from JADE API
Purpose

To maintain an up-to-date registry of active RCC retention rules from the JADE platform.

Process

Extraction ‚Äî JADE Master Catalog exposes RCC data through REST APIs.

Transformation ‚Äî API data is flattened and normalized into the api_tables_prototype layer.

DBT Model (88057_jade_data_retention) ‚Äî Consumes the API layer and materializes the RCC rule definitions.

Registry Formation ‚Äî The model stores all active RCCs along with their retention period and units.

Output Table: 88057_jade_data_retention
Column	Description
classcode	RCC identifier (e.g., DBU015D)
ruleperiod	Retention duration (e.g., 15)
periodunitcode	Retention unit (D = Days, M = Months, Y = Years)
retentionclasscodestatus	Current RCC status (Active expected)
parentrccidentifier	Parent RCC linkage, if any
Key Notes

Acts as source-of-truth for all purge logic.

Must be refreshed before purge jobs run.

Invalid or inactive RCCs are filtered out.

üß© 3. Flow 2 ‚Äì Data Purge by RCC Rule
Purpose

To systematically delete records older than the defined retention window for each model using RCC rules.

Triggered By

Kestra ‚Üí DBT run (purge_by_rcc macro)

Process Steps

Model Schema Declaration

Each DBT model defines:

config:
  rcc_code: "DBU045D"
  purge_date_field: "record_created_at"


Macro Execution

purge_by_rcc() validates the model‚Äôs RCC against 88057_jade_data_retention.

Retention Interval Computation

Calculates cutoff date using ruleperiod and periodunitcode.

Record Identification

Fetches all rows older than computed cutoff.

Snapshot Capture

Iceberg $snapshots are queried for before and after states.

Conditional Deletion

Controlled by flag: execute_delete=True

Deletes qualifying records if enabled.

Audit Insert with Retry Logic

Inserts into purge_audit table.

Retries up to 5 times on transient failure (atomic-safe via Trino).

Logging

Logs success/failure, snapshot IDs, row counts, and executor.

Output Table: purge_audit
Column	Description
model_name	DBT model name
rcc_code	RCC applied for purge
ruleperiod, unit_code	Retention interval
record_count_before, record_count_after	Validation metrics
snapshot_id_before, snapshot_id_after	Iceberg lineage
purge_timestamp	Purge execution time
executed_by	DBT user or role
Error Handling

Retry block with exponential backoff using Trino CALL system.sleep(1) between attempts.

If all retries fail, error is logged and purge proceeds without halting the DBT job.

üß© 4. Flow 3 ‚Äì RCC Code Validation and Compliance Audit
Purpose

To independently validate:

Every model has an RCC code assigned.

RCC codes are valid and active in the JADE registry.

Iceberg snapshot expiry is not shorter than the retention period defined by RCC.

Execution

Scheduled daily/weekly as a standalone DBT job.

Reads from:

manifest.json (for model list)

88057_jade_data_retention (for policy lookup)

Iceberg metadata tables (for snapshot expiry)

Process Steps

Identify all DBT models.

Check if rcc_code is defined in each model.

Validate each RCC code against JADE retention table.

Compute retention window.

Fetch snapshot expiry from Iceberg metadata.

Compare retention window vs snapshot expiry.

Write validation result to audit_rcc_codes.

Output Table: audit_rcc_codes
Column	Description
model_name	DBT model name
rcc_code	Declared RCC code
retention_value	e.g., 15D, 6M
status	PASS / FAIL / INACTIVE
message	Reason for validation result
scan_timestamp	Time of audit run
Validation Logic
Condition	Status	Message
Missing RCC code	FAIL	‚ÄúNo RCC defined in schema.yml‚Äù
RCC inactive or invalid	FAIL	‚ÄúInactive RCC in JADE registry‚Äù
Snapshot < RCC window	FAIL	‚ÄúSnapshot expires earlier than purge policy‚Äù
All checks pass	PASS	‚ÄúCompliant with retention policy‚Äù
üß© 5. Cross-Flow Dependencies
Flow	Depends On	Produces	Consumed By
Flow 1	JADE APIs	88057_jade_data_retention	Flows 2 & 3
Flow 2	Model schema + Flow 1 output	purge_audit	Governance reports
Flow 3	Flow 1 output + Iceberg metadata	audit_rcc_codes	Compliance dashboards
üß† 6. Governance & Reporting

All three flows integrate into the Governance & Compliance Dashboard, which visualizes:

Purge status by model

RCC compliance rate

Snapshot retention alignment

Audit log trends over time

Key outputs:

purge_audit: Operational purge tracking

audit_rcc_codes: Policy compliance metrics

88057_jade_data_retention: Policy reference

üõ†Ô∏è 7. Technologies Used
Layer	Tool	Purpose
Policy Source	JADE API	Master RCC definitions
Data Transformation	DBT	Model building & macro logic
Execution Engine	Trino	SQL computation, deletion, and inserts
Storage Layer	Iceberg	Data + snapshots
Audit Tables	Glue Catalog	Persisted metadata tables
Orchestration	Kestra	Parallel dbt job scheduling
Governance	Dashboards (Quicksight / Tableau)	Visualization of compliance metrics
üß© 8. Mermaid Flow Reference
%% Unified RCC Data Retention Framework
flowchart TD
    subgraph F1[Flow 1: RCC Source Sync from JADE API]
        A1[JADE Master Catalog] --> A2[JADE API Endpoint - REST]
        A2 --> A3[API Tables Model (api_tables_prototype)]
        A3 --> A4[Transform & Normalize RCC Fields]
        A4 --> A5[DBT Model: 88057_jade_data_retention]
        A5 --> A6[Retention Rule Registry (classcode, ruleperiod, periodunitcode)]
    end

    subgraph F2[Flow 2: Data Purge by RCC Rule]
        B1[Model Schema.yml<br/>rcc_code + purge_date_field] --> B2[Macro: purge_by_rcc()]
        B2 --> B3[Lookup RCC from 88057_jade_data_retention]
        B3 --> B4[Compute Retention Window]
        B4 --> B5[Identify Records Older than Cutoff]
        B5 --> B6[Query Iceberg $snapshots (snapshot_before)]
        B6 --> B7{execute_delete = True?}
        B7 -- Yes --> B8[DELETE Old Records from Model Table]
        B7 -- No --> B9[Dry Run Mode: Log Only]
        B8 --> B10[Query Iceberg $snapshots (snapshot_after)]
        B9 --> B10
        B10 --> B11[Insert Audit Record into purge_audit Table]
        B11 --> B12[Retry Logic (3‚Äì5 Attempts)]
        B12 --> B13[Audit Success or Failure Logged]
    end

    subgraph F3[Flow 3: RCC Validation and Compliance Audit]
        C1[List All DBT Models] --> C2[Check if rcc_code is Defined]
        C2 -->|Missing| C3[Mark as FAILED - Missing RCC Code]
        C2 -->|Present| C4[Validate RCC Against jade_data_retention]
        C4 -->|Invalid/Inactive| C5[Mark as FAILED - Invalid RCC]
        C4 -->|Valid| C6[Fetch Retention Rule]
        C6 --> C7[Compare Iceberg Snapshot Expiry vs RCC Retention]
        C7 -->|Snapshot < RCC| C8[FAILED - Shorter Snapshot Retention]
        C7 -->|Snapshot ‚â• RCC| C9[PASS - Valid Retention]
        C8 --> C10[Insert into audit_rcc_codes Table]
        C9 --> C10
        C10 --> C11[Generate Compliance Report (PASS/FAIL)]
    end

    A5 --> B3
    A5 --> C4
    B13 --> C7
    C11 --> D1[Governance Dashboard / Compliance Validation]


Would you like me to format this into a ready-to-share PDF or Markdown file (with headers, tables, and Mermaid embedded) so you can directly attach it in Confluence or send to the team via email?
