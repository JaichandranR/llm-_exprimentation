import unittest
import tempfile
import json
import yaml
from pathlib import Path

from src.generate_overview import (
    read_catalog,
    generate_yaml_object,
    write_yaml,
    write_markdown
)

class TestGenerateOverview(unittest.TestCase):
    def setUp(self):
        # Create real temp directory
        self.temp_dir = tempfile.TemporaryDirectory()
        self.base_path = Path(self.temp_dir.name)
        (self.base_path / "target").mkdir()
        (self.base_path / "models" / "sources").mkdir(parents=True)

        # Define paths
        self.catalog_path = self.base_path / "target" / "catalog.json"
        self.yaml_output = self.base_path / "models" / "sources" / "cosmos_nonhcd_iceberg.yml"
        self.md_output = self.base_path / "models" / "overview.md"

        # Sample catalog content
        catalog = {
            "nodes": {
                "model.test.table1": {
                    "metadata": {
                        "name": "table1",
                        "schema": "common_data_reporting",
                        "database": "cosmos_nonhcd_iceberg"
                    }
                },
                "model.test.skip": {
                    "metadata": {
                        "name": "skip",
                        "schema": "common_data_raw",
                        "database": "cosmos_nonhcd_iceberg"
                    }
                }
            }
        }

        with open(self.catalog_path, "w") as f:
            json.dump(catalog, f)

    def tearDown(self):
        # Explicitly close and cleanup
        self.temp_dir.cleanup()

    def test_generate_yaml_and_markdown_files(self):
        # Patch the global CATALOG_PATH just for this test
        catalog = read_catalog.__globals__["CATALOG_PATH"] = self.catalog_path
        catalog = read_catalog()

        yaml_obj = generate_yaml_object(catalog)

        write_yaml(yaml_obj, self.yaml_output)
        write_markdown(yaml_obj, self.md_output)

        # Validate YAML
        self.assertTrue(self.yaml_output.exists())
        with open(self.yaml_output) as f:
            y = yaml.safe_load(f)
        self.assertEqual(len(y["sources"][0]["tables"]), 1)
        self.assertEqual(y["sources"][0]["tables"][0]["name"], "table1")

        # Validate Markdown
        self.assertTrue(self.md_output.exists())
        content = self.md_output.read_text()
        self.assertIn("table1", content)
        self.assertNotIn("skip", content)
        self.assertIn("```yaml", content)

if __name__ == "__main__":
    unittest.main()
