from pyspark.context import SparkContext
from awsglue.context import GlueContext
from pyspark.sql import SparkSession

# Define catalog and warehouse path
catalog_nm = "cosmos_nonhcd_iceberg"
output_bucket = "s3://app-id-90177-dep-id-114232-uu-id-pee895fr5knp/"  # Needed for Iceberg to find metadata

# Start Glue context with Spark
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session

# Enable Iceberg support
spark.conf.set(f"spark.sql.catalog.{catalog_nm}", "org.apache.iceberg.spark.SparkCatalog")
spark.conf.set(f"spark.sql.catalog.{catalog_nm}.catalog-impl", "org.apache.iceberg.aws.glue.GlueCatalog")
spark.conf.set(f"spark.sql.catalog.{catalog_nm}.io-impl", "org.apache.iceberg.aws.s3.S3FileIO")
spark.conf.set(f"spark.sql.catalog.{catalog_nm}.warehouse", output_bucket)
spark.conf.set("spark.sql.extensions", "org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions")

# Step 1: Get tables from Glue catalog
tables = spark.sql(f"SHOW TABLES IN {catalog_nm}.common_data").collect()

print("üîç Listing tables in Glue catalog:")
for table in tables:
    table_name = table.tableName
    print(f"\nüìò Table: {table_name}")
    
    try:
        # Step 2: Query Iceberg metadata for snapshot lineage
        snapshot_info = spark.sql(
            f"SELECT * FROM `{catalog_nm}.common_data.{table_name}$snapshots`"
        ).collect()

        print("üì∏ Snapshot Lineage:")
        for snap in snapshot_info:
            print(f"""  - Snapshot ID: {snap['snapshot_id']}
    Timestamp: {snap['committed_at']}
    Operation: {snap['operation']}
    Manifest List: {snap['manifest_list']}
    Summary: {snap['summary']}
    Parent Snapshot ID: {snap['parent_id']}
    """)

    except Exception as e:
        print(f"‚ö†Ô∏è Failed to retrieve snapshot lineage for {table_name}: {e}")
