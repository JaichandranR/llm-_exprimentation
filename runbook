import unittest
from unittest.mock import patch, MagicMock
import src.main.python.common_data_sync as common_data_sync

class TestCommonDataSync(unittest.TestCase):

    def test_trim_metadata_location(self):
        trimmed = common_data_sync.trim_metadata_location("s3://dummy/prefix/metadata/")
        self.assertEqual(trimmed, "s3://dummy/prefix/")

    @patch("src.main.python.common_data_sync.boto3.client")
    def test_copy_tables(self, mock_boto_client):
        mock_glue_client = MagicMock()
        mock_boto_client.return_value = mock_glue_client

        mock_glue_client.get_paginator.return_value.paginate.return_value = [
            {
                "TableList": [
                    {
                        "Name": "test_table",
                        "StorageDescriptor": {
                            "Location": "s3://dummy-bucket/test_table/metadata/",
                            "Columns": [],
                            "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
                            "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
                            "SerdeInfo": {
                                "SerializationLibrary": "org.openx.data.jsonserde.JsonSerDe",
                                "Parameters": {}
                            }
                        },
                        "PartitionKeys": [],
                        "TableType": "EXTERNAL_TABLE",
                        "Parameters": {"classification": "parquet"}
                    }
                ]
            }
        ]

        summary = common_data_sync.copy_tables()
        self.assertEqual(summary["processed_tables"], 1)

if __name__ == "__main__":
    unittest.main()
