
Updated check_explain_plan_all() Additions
# ORDER BY without LIMIT
    if "ORDER BY" in sql.upper() and "LIMIT" not in sql.upper():
        issues.append({
            "Model": model_name,
            "Validation": "ORDER BY without LIMIT",
            "Observation": "ORDER BY used without LIMIT may cause large sort operations",
            "Status": "Consider adding LIMIT clause"
        })
    else:
        issues.append({
            "Model": model_name,
            "Validation": "ORDER BY without LIMIT",
            "Observation": "ORDER BY used with LIMIT or not used at all",
            "Status": "No action needed"
        })

    # LIKE '%abc%' inefficient pattern
    if re.search(r"LIKE\\s+'%.*%'", sql, re.IGNORECASE):
        issues.append({
            "Model": model_name,
            "Validation": "Inefficient LIKE Pattern",
            "Observation": "LIKE with leading wildcard prevents index usage",
            "Status": "Use more selective filters"
        })
    else:
        issues.append({
            "Model": model_name,
            "Validation": "Inefficient LIKE Pattern",
            "Observation": "LIKE usage optimized or not used",
            "Status": "No action needed"
        })

    # DISTINCT usage
    if re.search(r"\\bDISTINCT\\b", sql, re.IGNORECASE):
        issues.append({
            "Model": model_name,
            "Validation": "DISTINCT Usage",
            "Observation": "DISTINCT may be used unnecessarily",
            "Status": "Review usage"
        })
    else:
        issues.append({
            "Model": model_name,
            "Validation": "DISTINCT Usage",
            "Observation": "DISTINCT not used",
            "Status": "No action needed"
        })

    # Functions in WHERE clause
    if re.search(r"WHERE\\s+.*(LOWER|UPPER|CAST)\\s*\\(", sql, re.IGNORECASE):
        issues.append({
            "Model": model_name,
            "Validation": "Function in WHERE Clause",
            "Observation": "Functions in WHERE clause may prevent pruning/index use",
            "Status": "Consider preprocessing columns"
        })
    else:
        issues.append({
            "Model": model_name,
            "Validation": "Function in WHERE Clause",
            "Observation": "No function usage detected in WHERE clause",
            "Status": "No action needed"
        })

    # Long query size
    line_count = len(sql.splitlines())
    if line_count > 150:
        issues.append({
            "Model": model_name,
            "Validation": "Query Length",
            "Observation": f"Query is {line_count} lines long",
            "Status": "Consider breaking into smaller models"
        })
    else:
        issues.append({
            "Model": model_name,
            "Validation": "Query Length",
            "Observation": f"Query is {line_count} lines (acceptable)",
            "Status": "No action needed"
        })


Updated structural_checks() Addition


    # GROUP BY high-cardinality columns
    if re.search(r"GROUP BY\\s+.*(user_id|session_id|uuid|device_id)", sql, re.IGNORECASE):
        issues.append({
            "Model": model_name,
            "Validation": "GROUP BY High Cardinality",
            "Observation": "GROUP BY on high-cardinality columns",
            "Status": "Consider if aggregation can be optimized"
        })
    else:
        issues.append({
            "Model": model_name,
            "Validation": "GROUP BY High Cardinality",
            "Observation": "GROUP BY does not use known high-cardinality fields",
            "Status": "No action needed"
        })
