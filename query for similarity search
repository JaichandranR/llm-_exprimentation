def similarity_search_in_postgres(query_embedding, top_k=5):
    """
    Perform similarity search directly in PostgreSQL using the `pgvector` extension.
    """
    if not isinstance(query_embedding, np.ndarray):
        raise ValueError("query_embedding must be a NumPy array.")

    # Convert the embedding to a list for query compatibility
    query_embedding_list = query_embedding.tolist()

    # SQL query for similarity search
    query = """
        SELECT control_id, chunk_id, source, embedding <-> ARRAY[%s]::vector AS similarity
        FROM application.mitre_embeddings
        ORDER BY similarity ASC
        LIMIT %s;
    """

    # Database connection and query execution
    conn = get_postgres_connection()
    cursor = conn.cursor()

    try:
        # Execute the similarity search query
        cursor.execute(query, (query_embedding_list, top_k))
        rows = cursor.fetchall()

        # Parse the query results
        results = []
        for row in rows:
            results.append({
                "control_id": row[0],
                "chunk_id": row[1],
                "source": row[2],
                "similarity": row[3]
            })

        return results
    except Exception as e:
        print(f"Error during similarity search: {e}")
        raise
    finally:
        cursor.close()
        conn.close()

# Example usage
if __name__ == "__main__":
    query = "Describe the mitigation technique for preventing phishing attacks."
    query_embedding = get_query_embedding(query)  # Fetch the query embedding from the API
    top_results = similarity_search_in_postgres(query_embedding, top_k=5)

    print("Top results:")
    for result in top_results:
        print(f"Control ID: {result['control_id']}, Chunk ID: {result['chunk_id']}, Source: {result['source']}, Similarity: {result['similarity']:.4f}")
