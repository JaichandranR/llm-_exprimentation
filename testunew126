def test_snapshot_expiration_and_orphan_file_removal_called(self):
    with patch("builtins.print") as mock_print:
        iceberg_compaction.args = {
            'catalog_nm': 'test_catalog',
            'table_nm': 'test_table',
            'source_db': 'test_db',
            'expire_snapshots_day': '7',
            'skip_newest_partitions': '0'
        }

        self.mock_spark.sql = MagicMock()
        self.mock_spark.catalog.refreshTable = MagicMock()

        mock_df = MagicMock()
        self.mock_spark.table.return_value = mock_df
        self.mock_spark.read.format.return_value.load.return_value = mock_df

        mock_df.select.return_value = mock_df
        mock_df.filter.return_value = mock_df
        mock_df.withColumn.return_value = mock_df
        mock_df.distinct.return_value = mock_df
        mock_df.join.return_value = mock_df

        # Set the mocked first row with real int for last_compacted_hour
        mock_first = MagicMock()
        setattr(mock_first, "last_compacted_hour", 485760)  # âœ… inject as int
        mock_df.first.return_value = mock_first

        mock_df.__getitem__.return_value.__ge__.return_value = MagicMock()
        mock_df.__getitem__.return_value.__lt__.return_value = MagicMock()
        mock_df.schema.fields = []

        iceberg_compaction.main()

        self.assertTrue(self.mock_spark.sql.called)
