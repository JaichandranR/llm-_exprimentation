import unittest
from unittest.mock import patch, MagicMock

class TestDoWorkerEtl(unittest.TestCase):
    @patch("builtins.open", new_callable=MagicMock)
    @patch("csorion.aws_utils.boto3.client")  # adjust if import path differs
    @patch("src.main.python.wis_etl.getResolvedOptions")
    @patch("src.main.python.wis_etl.get_path_for_data_set")
    @patch("src.main.python.wis_etl.perform_full_load_etl")
    def test_do_worker_etl(
        self,
        mock_perform_etl,
        mock_get_path,
        mock_get_opts,
        mock_boto_client,
        mock_open
    ):
        # ✅ Simulate GlueContext and Spark
        mock_spark = MagicMock()

        # ✅ Patch AWS S3 client list_objects_v2
        mock_s3 = mock_boto_client.return_value
        mock_s3.list_objects_v2.return_value = {
            "Contents": [{"Key": "dummy_file.json"}]
        }

        # ✅ Ensure source_dir has 2 comma-separated parts
        mock_get_opts.return_value = {
            "JOB_NAME": "dummy_job",
            "source_dir": "s3://valid-bucket/prefix1,s3://valid-bucket/prefix2",
            "raw_bucket": "valid-bucket",
            "dq_bucket": "valid-bucket",
            "output_bucket": "valid-bucket",
            "base_dir": "dummy",
            "data_set": "dummy",
            "history_data_set": "dummy",
            "ignore_threshold": "false",
            "threshold_info": "none",
            "schema_file_name": "dummy",
            "TempDir": "/tmp",
            "multiple_source_dataset": "false"
        }

        mock_get_path.return_value = "s3://valid-bucket"
        mock_perform_etl.return_value = "etl_result"

        # ✅ Debug prints to confirm correctness
        print("MOCK SOURCE DIR =", mock_get_opts.return_value["source_dir"])
        print("SPLIT RESULT =", mock_get_opts.return_value["source_dir"].split(','))

        # ✅ Call the function (import it if not in scope)
        from src.main.python.wis_etl import do_worker_etl

        result = do_worker_etl(
            mock_spark,
            "source_dir",
            "target_dir",
            "history_dir",
            "dq_dir",
            "schema_loc_info"
        )

        self.assertIsNotNone(result)
        mock_get_path.assert_called()
        mock_perform_etl.assert_called()
