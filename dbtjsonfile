-- Gather model keys
{% set model_keys = [] %}
{% for key in graph.keys() %}
  {% if key.startswith('model.') %}
    {% do model_keys.append(key) %}
  {% endif %}
{% endfor %}

-- Debug print
{% do log("GRAPH MODELS: " ~ model_keys, info=True) %}

-- Optional return as table output
SELECT '{{ model_keys }}' AS models_debug











-- macros/acl_utils.sql

{% macro generate_acl_json(model_group_map) %}
  {% set rows = [] %}
  {% set all_models = graph.nodes.keys() | list %}
  {% do log("GRAPH DEBUG: " ~ all_models, info=True) %}

  {% for model_name, meta in model_group_map.items() %}
    {% set found = all_models | select('search', model_name) | list | length > 0 %}
    {% if found %}
      {% set row = {
        "group": meta.group,
        "catalog": target.database,
        "schema": target.schema,
        "table": model_name,
        "privileges": meta.privileges
      } %}
      {% do rows.append(row) %}
    {% else %}
      {% do log("Skipping model: " ~ model_name ~ " not found in graph", info=True) %}
    {% endif %}
  {% endfor %}

  {% set json_content = {"tables": rows} %}
  {{ return(json_content | tojson) }}
{% endmacro %}













{% macro generate_acl_json(model_group_map) %}
  {% set rows = [] %}
  {% set all_models = graph.nodes.keys() | list %}
  {% do log("Available models: " ~ all_models, info=True) %}

  {% for model_name, meta in model_group_map.items() %}
    {% set found = all_models | select('search', model_name) | list | length > 0 %}
    {% if found %}
      {% set row = {
        "group": meta.group,
        "catalog": target.database,
        "schema": target.schema,
        "table": model_name,
        "privileges": meta.privileges
      } %}
      {% do rows.append(row) %}
    {% else %}
      {% do log("Skipping model '" ~ model_name ~ "' - not found in graph", info=True) %}
    {% endif %}
  {% endfor %}

  {% set full_json = {"tables": rows} %}
  {{ return(full_json | tojson) }}
{% endmacro %}






{{ config(
  materialized='table',
  on_table_exists='drop',
  location='s3a://your-bucket/acl_inventory/json/',
  properties={"format": "'TEXTFILE'"}
) }}

{% set model_group_map = {
  "32010_seal_application": {"group": "ro.gmetrics", "privileges": ["SELECT"]},
  "32010_seal_bct": {"group": "ro.ccm", "privileges": ["SELECT"]}
} %}

SELECT '{{ generate_acl_json(model_group_map) }}' AS acl_json













{{ config(materialized='ephemeral') }}

{% do log("GRAPH DEBUG: " ~ graph.keys() | list, info=True) %}

SELECT 1




{{ config(materialized='ephemeral') }}

{% set model_group_map = {
  "32010_seal_application": {"group": "ro.gmetrics", "privileges": ["SELECT"]},
  "32010_seal_bct": {"group": "ro.ccm", "privileges": ["SELECT"]}
} %}

{{ generate_acl_json(model_group_map, graph) }}











{% macro generate_acl_json(model_group_map, graph) %}
  {% set rows = [] %}
  {% set available_models = [] %}

  {# Log all available models #}
  {% for key in graph %}
    {% if key.startswith('model.') %}
      {% do available_models.append(key) %}
    {% endif %}
  {% endfor %}
  {{ log("Available models: " ~ available_models, info=True) }}

  {% for model_name, meta in model_group_map.items() %}
    {% set model_in_graph = false %}

    {% for key in graph %}
      {% if key.startswith('model.') and key.endswith('.' ~ model_name) %}
        {% set model_in_graph = true %}
        {% break %}
      {% endif %}
    {% endfor %}

    {% if model_in_graph %}
      {% set row = {
        "group": meta.group,
        "catalog": target.database,
        "schema": target.schema,
        "table": model_name,
        "privileges": meta.privileges
      } %}
      {% do rows.append(row) %}
    {% else %}
      {{ log("Skipping model '" ~ model_name ~ "' - not found in graph", info=True) }}
    {% endif %}
  {% endfor %}

  {% set full_json = {"tables": rows} %}
  {{ return(full_json | tojson) }}
{% endmacro %}








{{ config(
  materialized='table',
  location='s3a://.../acl_inventory/json/',
  properties={"format": "'TEXTFILE'"}
) }}

{% set model_group_map = {
  "32010_seal_application": {"group": "ro.gmetrics", "privileges": ["SELECT"]},
  "32010_seal_bct": {"group": "ro.ccm", "privileges": ["SELECT"]}
} %}

SELECT '{{ generate_acl_json(model_group_map, graph) }}' AS acl_json
