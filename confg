from pyspark.sql import SparkSession
from pyspark.sql.functions import lit, sha2, concat_ws
from boto3 import session
from uuid import uuid4

# -----------------------------
# Catalog & Warehouse Config
# -----------------------------
catalog_nm = "cosmos_nonhcd_iceberg"
database_nm = "common_data"
inventory_table_nm = "iceberg_metadata_inventory"
inventory_table_full = f"{database_nm}.{inventory_table_nm}"
warehouse_path = "s3://app-id-90177-dep-id-114232-uu-id-pee895fr5knp/"

# -----------------------------
# Initialize Spark Session (no --conf needed)
# -----------------------------
spark = (
    SparkSession.builder
    .appName("IcebergMetadataInventory")
    .config("spark.sql.extensions", "org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions")
    .config(f"spark.sql.catalog.{catalog_nm}", "org.apache.iceberg.spark.SparkCatalog")
    .config(f"spark.sql.catalog.{catalog_nm}.catalog-impl", "org.apache.iceberg.aws.glue.GlueCatalog")
    .config(f"spark.sql.catalog.{catalog_nm}.io-impl", "org.apache.iceberg.aws.s3.S3FileIO")
    .config(f"spark.sql.catalog.{catalog_nm}.warehouse", warehouse_path)
    .getOrCreate()
)

region = session.Session().region_name
run_id = str(uuid4())

# -----------------------------
# Set active catalog
# -----------------------------
spark.sql(f"USE {catalog_nm}")

# -----------------------------
# Create metadata inventory table if not exists
# -----------------------------
spark.sql(f"""
CREATE TABLE IF NOT EXISTS {inventory_table_full} (
    table_name STRING,
    region STRING,
    run_id STRING,
    snapshot_id BIGINT,
    committed_at TIMESTAMP,
    operation STRING,
    parent_id BIGINT,
    manifest_list STRING,
    manifest_path STRING,
    partition_spec_id INT,
    partition STRUCT<partition_key: STRING>,
    record_count BIGINT,
    file_path STRING,
    file_size_in_bytes BIGINT,
    table_location STRING,
    summary STRING,
    snapshot_checksum STRING
)
PARTITIONED BY (table_name, region)
TBLPROPERTIES ('format'='iceberg')
""")

# -----------------------------
# Helper to check if a table is Iceberg
# -----------------------------
def is_iceberg_table(table_identifier: str) -> bool:
    try:
        tbl = spark._jsparkSession.catalog().getTable(table_identifier)
        return tbl.properties().get("table_type") == "ICEBERG"
    except Exception:
        return False

# -----------------------------
# Filter actual Iceberg tables
# -----------------------------
raw_tables = spark.catalog.listTables(f"{catalog_nm}.{database_nm}")
tables = []
for t in raw_tables:
    if t.tableType != "TABLE":
        continue
    identifier = f"{catalog_nm}.{database_nm}.{t.name}"
    if is_iceberg_table(identifier):
        tables.append(t)

print(f"‚úÖ {len(tables)} Iceberg tables identified: {[t.name for t in tables]}")

# -----------------------------
# Loop and collect metadata
# -----------------------------
for tbl in tables:
    table_name = tbl.name
    print(f"\nüîç Processing: {table_name}")

    try:
        qualified = f"`{catalog_nm}.{database_nm}.{table_name}`"

        # Iceberg metadata queries
        snapshots_df = spark.sql(f"SELECT snapshot_id, committed_at, operation, parent_id, manifest_list, summary FROM {qualified}$snapshots")
        manifests_df = spark.sql(f"SELECT * FROM {qualified}$manifests")
        files_df = spark.sql(f"SELECT * FROM {qualified}$files")

        # Iceberg table location via JVM API
        table_location = spark._jsparkSession.catalog().getTable(f"{catalog_nm}.{database_nm}", table_name).location()

        # Enrich and join
        joined_df = snapshots_df \
            .join(manifests_df, "snapshot_id", "left") \
            .join(files_df, manifests_df.path == files_df.file_path, "left") \
            .withColumn("table_name", lit(table_name)) \
            .withColumn("region", lit(region)) \
            .withColumn("run_id", lit(run_id)) \
            .withColumn("table_location", lit(table_location)) \
            .withColumn("snapshot_checksum", sha2(concat_ws("||",
                snapshots_df.snapshot_id.cast("string"),
                snapshots_df.committed_at.cast("string"),
                snapshots_df.operation,
                snapshots_df.manifest_list
            ), 256))

        # Append to inventory table
        joined_df.selectExpr(
            "table_name", "region", "run_id", "snapshot_id", "committed_at", "operation", "parent_id",
            "manifest_list", "path as manifest_path", "partition_spec_id", "partition", "record_count",
            "file_path", "file_size_in_bytes", "table_location", "summary", "snapshot_checksum"
        ).writeTo(f"{catalog_nm}.{inventory_table_full}").append()

        print(f"‚úÖ Metadata stored for: {table_name}")

    except Exception as e:
        print(f"‚ö†Ô∏è Skipped {table_name} due to error: {e}")
