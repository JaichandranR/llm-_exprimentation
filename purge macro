{% macro purge_by_rcc(model_name, execute_delete=False) %}
{# /* ================================================================
Macro: purge_by_rcc
Purpose:
  - Purges data based on RCC retention configuration.
  - Logs pre/post record counts and snapshot IDs into purge_audit.
================================================================ */ #}

{% if not execute %}
  {{ return("Macro executed in parse-only mode") }}
{% endif %}

{# /* ---------------------------------------------------------------
 Step 1: Locate model node
---------------------------------------------------------------- */ #}
{% set node = graph.nodes.values()
   | selectattr("resource_type", "equalto", "model")
   | selectattr("name", "equalto", model_name)
   | list
   | first %}

{% if not node %}
  {% do exceptions.raise_compiler_error("Could not locate model node for " ~ model_name) %}
{% endif %}

{# /* ---------------------------------------------------------------
 Step 2: Get RCC metadata from model config
---------------------------------------------------------------- */ #}
{% set rcc_code = node.config.get('rcc_code', none) %}
{% set purge_field = node.config.get('purge_date_field', none) %}

{% if not rcc_code %}
  {% do log("No RCC code defined for model " ~ model_name ~ ". Skipping purge.", info=True) %}
  {% do return('') %}
{% endif %}

{# /* ---------------------------------------------------------------
 Step 3: Retrieve retention rule from Jade retention table
---------------------------------------------------------------- */ #}
{% set jade_table = node.database ~ '.' ~ node.schema ~ '."' ~ '88057_jade_data_retention' ~ '"' %}
{% set retention_query %}
    SELECT ruleperiod, periodunitcode
    FROM {{ jade_table }}
    WHERE classcode = '{{ rcc_code }}'
      AND retentionclasscodestatus = 'Active'
{% endset %}
{% set retention_result = run_query(retention_query) %}
{% if retention_result is none or retention_result.rows|length == 0 %}
  {% do exceptions.raise_compiler_error("No retention rule found for RCC: " ~ rcc_code) %}
{% endif %}

{% set ruleperiod = retention_result.rows[0][0] %}
{% set unit_code  = retention_result.rows[0][1] %}
{% set unit_map   = {'D': 'DAY', 'M': 'MONTH', 'Y': 'YEAR'} %}
{% set unit = unit_map.get(unit_code, 'DAY') %}

{# /* ---------------------------------------------------------------
 Step 4: Prepare audit table reference (ensures dependency)
---------------------------------------------------------------- */ #}
{% if not execute %}
  {{ ref('purge_audit') }}
{% endif %}
{% set audit_table = adapter.get_relation(
    database=node.database,
    schema=node.schema,
    identifier='purge_audit'
) %}

{# /* ---------------------------------------------------------------
 Step 5: Table + snapshot references
---------------------------------------------------------------- */ #}
{% set table_fqn = node.database ~ '.' ~ node.schema ~ '."' ~ node.name ~ '"' %}
{% set snapshots_fqn = node.database ~ '.' ~ node.schema ~ '."' ~ node.name ~ '$snapshots"' %}

{# /* ---------------------------------------------------------------
 Step 6: Pre-purge metrics
---------------------------------------------------------------- */ #}
{% set pre_count_query %}
    SELECT COUNT(*) FROM {{ table_fqn }}
{% endset %}
{% set pre_result = run_query(pre_count_query) %}
{% set record_before = pre_result.rows[0][0] if pre_result and pre_result.rows|length > 0 else 0 %}

{% set snapshot_before_query %}
    SELECT snapshot_id
    FROM {{ snapshots_fqn }}
    ORDER BY committed_at DESC
    LIMIT 1
{% endset %}
{% set snap_before_result = run_query(snapshot_before_query) %}
{% set snapshot_before = snap_before_result.rows[0][0] if snap_before_result and snap_before_result.rows|length > 0 else None %}

{# /* ---------------------------------------------------------------
 Step 7: Purge Execution
---------------------------------------------------------------- */ #}
{% set delete_sql %}
    DELETE FROM {{ table_fqn }}
    WHERE {{ purge_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' {{ unit }}
{% endset %}

{% if execute_delete %}
  {% do run_query(delete_sql) %}
{% endif %}

{# /* ---------------------------------------------------------------
 Step 8: Post-purge metrics
---------------------------------------------------------------- */ #}
{% set post_result = run_query(pre_count_query) %}
{% set record_after = post_result.rows[0][0] if post_result and post_result.rows|length > 0 else 0 %}
{% set deleted_rows = record_before - record_after %}

{% set snapshot_after_query %}
    SELECT snapshot_id
    FROM {{ snapshots_fqn }}
    ORDER BY committed_at DESC
    LIMIT 1
{% endset %}
{% set snap_after_result = run_query(snapshot_after_query) %}
{% set snapshot_after = snap_after_result.rows[0][0] if snap_after_result and snap_after_result.rows|length > 0 else None %}

{# /* ---------------------------------------------------------------
 Step 9: Insert Audit Record
---------------------------------------------------------------- */ #}
{% set insert_audit %}
    INSERT INTO {{ audit_table }}
    (model_name, schema_name, database_name,
     rcc_code, purge_date_field, ruleperiod, unit_code,
     record_count_before, record_count_after,
     snapshot_id_before, snapshot_id_after,
     purge_timestamp, executed_by)
    VALUES (
      '{{ model_name }}',
      '{{ node.schema }}',
      '{{ node.database }}',
      '{{ rcc_code }}',
      '{{ purge_field }}',
      '{{ ruleperiod }}',
      '{{ unit_code }}',
      {{ record_before }},
      {{ record_after }},
      {% if snapshot_before %}'{{ snapshot_before }}'{% else %}NULL{% endif %},
      {% if snapshot_after %}'{{ snapshot_after }}'{% else %}NULL{% endif %},
      CURRENT_TIMESTAMP,
      CURRENT_USER
    )
{% endset %}
{% do run_query(insert_audit) %}

{% do log("Purge completed for model: " ~ model_name ~ ", Deleted rows: " ~ deleted_rows, info=True) %}

{% endmacro %}
