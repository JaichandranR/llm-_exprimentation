{% macro purge_by_rcc(model_name, execute_delete=False) %}
{# /* 
==============================================================================
Macro: purge_by_rcc
Purpose:
  - Purges data based on RCC retention configuration for the given model.
  - Logs purge audit details (counts and snapshot IDs) into dbt-managed table.
==============================================================================
*/ #}

{# /* ----------------------------------------------------------------------
   Step 1: Validate execution context
---------------------------------------------------------------------- */ #}
{% if not execute or model_name is none or model_name == '' %}
    {{ return("Skipping purge: invalid model or execution context") }}
{% endif %}


{# /* ----------------------------------------------------------------------
   Step 2: Locate model node safely (dbt 1.8+ compatible)
---------------------------------------------------------------------- */ #}
{% set graph = context.get('graph', {}) %}
{% if not graph or 'nodes' not in graph %}
    {{ exceptions.raise_compiler_error("Graph context missing for model: " ~ model_name) }}
{% endif %}

{% set node = graph.nodes.values()
    | selectattr('resource_type', 'equalto', 'model')
    | selectattr('name', 'equalto', model_name)
    | list
    | first %}

{% if not node %}
    {{ exceptions.raise_compiler_error("Could not locate model node for: " ~ model_name) }}
{% endif %}


{# /* ----------------------------------------------------------------------
   Step 3: Retrieve RCC metadata from model config
---------------------------------------------------------------------- */ #}
{% set rcc_code = node.config.get('rcc_code', none) %}
{% set purge_date_field = node.config.get('purge_date_field', 'cosmosingestedat') %}

{% if not rcc_code %}
    {{ log("No RCC code defined for model: " ~ model_name ~ ". Skipping purge.", info=True) }}
    {% do return('') %}
{% endif %}


{# /* ----------------------------------------------------------------------
   Step 4: Lookup retention rule from Jade retention table
---------------------------------------------------------------------- */ #}
{% set retention_query %}
    SELECT ruleperiod, periodunitcode
    FROM cosmos_nonhcd_iceberg_prototype.common_data_prototype."88057_jade_data_retention"
    WHERE classcode = '{{ rcc_code }}'
      AND retentionclasscodestatus = 'Active'
{% endset %}

{% set retention = run_query(retention_query) %}
{% if retention is none or retention.rows | length == 0 %}
    {{ exceptions.raise_compiler_error("No retention record found for RCC: " ~ rcc_code) }}
{% endif %}

{% set ruleperiod = retention.rows[0][0] %}
{% set unit_code = retention.rows[0][1] %}
{% set unit_map = {'D': 'DAY', 'M': 'MONTH', 'Y': 'YEAR'} %}
{% set unit = unit_map.get(unit_code, 'DAY') %}


{# /* ----------------------------------------------------------------------
   Step 5: Construct fully qualified table name
---------------------------------------------------------------------- */ #}
{% set full_table_name = node.database ~ '.' ~ node.schema ~ '."' ~ node.name ~ '"' %}


{# /* ----------------------------------------------------------------------
   Step 6: Reference dbt-managed purge_audit table safely (compile-time ref)
---------------------------------------------------------------------- */ #}

{% if not execute %}
    {# During parse/compile, just declare dependency #}
    {{ ref('purge_audit') }}
{% endif %}

{% set audit_table = adapter.get_relation(
    database = node.database,
    schema = node.schema,
    identifier = 'purge_audit'
) %}



{# /* ----------------------------------------------------------------------
   Step 7: Capture pre-purge metrics
---------------------------------------------------------------------- */ #}
{% set count_before_result = run_query("SELECT COUNT(*) FROM " ~ full_table_name) %}
{% set count_before = count_before_result.rows[0][0] if count_before_result and count_before_result.rows|length > 0 else 0 %}

{% set snapshot_before_result = run_query("SELECT max(snapshot_id) FROM " ~ full_table_name ~ "$snapshots") %}
{% set snapshot_before = snapshot_before_result.rows[0][0] if snapshot_before_result and snapshot_before_result.rows|length > 0 else None %}


{# /* ----------------------------------------------------------------------
   Step 8: Identify records eligible for purge
---------------------------------------------------------------------- */ #}
{% set eligible_count_query %}
    SELECT COUNT(*) AS cnt
    FROM {{ full_table_name }}
    WHERE {{ purge_date_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' {{ unit }}
{% endset %}
{% set eligible_result = run_query(eligible_count_query) %}
{% set eligible_count = eligible_result.rows[0][0] if eligible_result and eligible_result.rows|length > 0 else 0 %}


{# /* ----------------------------------------------------------------------
   Step 9: Execute purge if enabled
---------------------------------------------------------------------- */ #}
{% if execute_delete and eligible_count > 0 %}
    {% set delete_sql %}
        DELETE FROM {{ full_table_name }}
        WHERE {{ purge_date_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' {{ unit }}
    {% endset %}
    {% do run_query(delete_sql) %}
{% endif %}


{# /* ----------------------------------------------------------------------
   Step 10: Capture post-purge metrics
---------------------------------------------------------------------- */ #}
{% set count_after_result = run_query("SELECT COUNT(*) FROM " ~ full_table_name) %}
{% set count_after = count_after_result.rows[0][0] if count_after_result and count_after_result.rows|length > 0 else 0 %}

{% set snapshot_after_result = run_query("SELECT max(snapshot_id) FROM " ~ full_table_name ~ "$snapshots") %}
{% set snapshot_after = snapshot_after_result.rows[0][0] if snapshot_after_result and snapshot_after_result.rows|length > 0 else None %}


{# /* ----------------------------------------------------------------------
   Step 11: Insert purge audit record
---------------------------------------------------------------------- */ #}
{% set insert_audit_sql %}
    INSERT INTO {{ audit_table }} (
        model_name, schema_name, database_name, rcc_code,
        purge_date_field, ruleperiod, unit_code,
        record_count_before, record_count_after,
        snapshot_id_before, snapshot_id_after,
        purge_timestamp, executed_by
    )
    VALUES (
        '{{ node.name }}', '{{ node.schema }}', '{{ node.database }}', '{{ rcc_code }}',
        '{{ purge_date_field }}', '{{ ruleperiod }}', '{{ unit_code }}',
        {{ count_before }}, {{ count_after }},
        {% if snapshot_before %}'{{ snapshot_before }}'{% else %}NULL{% endif %},
        {% if snapshot_after %}'{{ snapshot_after }}'{% else %}NULL{% endif %},
        current_timestamp, '{{ invocation_id }}'
    )
{% endset %}
{% do run_query(insert_audit_sql) %}

{% endmacro %}
