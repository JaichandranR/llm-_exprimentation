
{% macro purge_by_rcc(model_name, execute_delete=False) %}
{# /* Register retention dependency at compile time */ #}
{% set _ = ref('88057_jade_data_retention') %}

{# /* rest of your macro follows */ #}


{% macro register_rcc_dependency() %}
    {# /* Register retention dependency globally */ #}
    {% set _ = ref('88057_jade_data_retention') %}
    {{ log("Registered RCC dependency for 88057_jade_data_retention", info=True) }}
{% endmacro %}


on-run-start:
  - "{{ register_rcc_dependency() }}"


models:
  +pre-hook:
    - "set session remote_task_max_request_size='16MB'"
    - "set session remote_task_request_size_headroom='4MB'"
    - "{% if execute is defined and execute %}{{ purge_by_rcc(model_name=model.name, execute_delete=True) }}{% endif %}"





{% macro purge_by_rcc(model_name, execute_delete=False) %}
{# /*
Macro: purge_by_rcc

Purpose:
  1. Checks RCC configuration for the given model.
  2. Retrieves retention rule from the 88057_jade_data_retention table.
  3. Identifies records exceeding retention period using purge_date_field.
  4. Optionally deletes eligible records if execute_delete=True.

Arguments:
  - model_name (string): dbt model name.
  - execute_delete (boolean): Whether to delete records or do dry run.

Usage:
  dbt run-operation purge_by_rcc --args "{\"model_name\": \"110930_ame_co_driver\", \"execute_delete\": true}"
*/ #}

    {# /*--- Force-register dependency at compile-time ---*/ #}
    {% set _ = ref('88057_jade_data_retention') %}

    {# /*--- Get model metadata ---*/ #}
    {% set node = graph.nodes.values() | selectattr('name', 'equalto', model_name) | first %}
    {% if not node %}
        {{ exceptions.raise_compiler_error("Model " ~ model_name ~ " not found in project.") }}
    {% endif %}

    {# /*--- Get RCC code and purge field ---*/ #}
    {% set rcc_code = node.config.get('rcc_code') %}
    {% set purge_date_field = node.config.get('purge_date_field', 'cosmosingestedat') %}
    {% if not rcc_code %}
        {{ log("No RCC code defined for model: " ~ model_name ~ ". Skipping purge.", info=True) }}
        {% do return(none) %}
    {% endif %}

    {# /*--- Retention rule lookup ---*/ #}
    {% set retention_query %}
        SELECT ruleperiod, periodunitcode
        FROM {{ ref('88057_jade_data_retention') }}
        WHERE classcode = '{{ rcc_code }}'
          AND retentionclasscodestatus = 'Active'
    {% endset %}

    {% set retention = run_query(retention_query) %}
    {% if retention is none or retention.rows | length == 0 %}
        {{ exceptions.raise_compiler_error("No retention record found for RCC " ~ rcc_code) }}
    {% endif %}

    {% set ruleperiod = retention.rows[0][0] %}
    {% set unit_code = retention.rows[0][1] %}

    {# /*--- Map short unit codes to Trino INTERVAL keywords ---*/ #}
    {% set unit_map = {'D': 'DAY', 'M': 'MONTH', 'Y': 'YEAR'} %}
    {% set unit = unit_map.get(unit_code, 'DAY') %}

    {# /*--- Fully qualified table name ---*/ #}
    {% set full_table_name = node.database ~ '.' ~ node.schema ~ '."' ~ node.name ~ '"' %}
    {{ log("Target table: " ~ full_table_name, info=True) }}

    {# /*--- Eligible record count ---*/ #}
    {% set eligible_count_query %}
        SELECT COUNT(*) AS cnt
        FROM {{ full_table_name }}
        WHERE {{ purge_date_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' {{ unit }}
    {% endset %}

    {% set result = run_query(eligible_count_query) %}
    {% set eligible_count = result.rows[0][0] if result and result.rows|length > 0 else 0 %}
    {{ log("Rows eligible for deletion: " ~ eligible_count, info=True) }}

    {% if execute_delete and eligible_count > 0 %}
        {# /*--- Execute purge ---*/ #}
        {% set delete_sql %}
            DELETE FROM {{ full_table_name }}
            WHERE {{ purge_date_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' {{ unit }}
        {% endset %}
        {{ log("Executing DELETE on table " ~ full_table_name, info=True) }}
        {% do run_query(delete_sql) %}
        {{ log("✅ Purge completed for model: " ~ model_name, info=True) }}
    {% elif not execute_delete %}
        {{ log("Dry run only: no DELETE executed.", info=True) }}
    {% else %}
        {{ log("ℹ️ No records eligible for purge for model: " ~ model_name, info=True) }}
    {% endif %}

{% endmacro %}
