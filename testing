
{% macro purge_by_rcc(model_name, execute_delete=False) %}
{# /* Register retention dependency at compile time */ #}
{% set _ = ref('88057_jade_data_retention') %}

{# /* rest of your macro follows */ #}


{% macro register_rcc_dependency() %}
    {# /* Register retention dependency globally */ #}
    {% set _ = ref('88057_jade_data_retention') %}
    {{ log("Registered RCC dependency for 88057_jade_data_retention", info=True) }}
{% endmacro %}


on-run-start:
  - "{{ register_rcc_dependency() }}"


models:
  +pre-hook:
    - "set session remote_task_max_request_size='16MB'"
    - "set session remote_task_request_size_headroom='4MB'"
    - "{% if execute is defined and execute %}{{ purge_by_rcc(model_name=model.name, execute_delete=True) }}{% endif %}"





{% macro purge_by_rcc(model_name, execute_delete=False) %}
{# /*--------------------------------------------------------------
    Macro: purge_by_rcc
    Purpose:
    Purges data based on RCC retention configuration for the given model.
    Runs only for the model currently being executed.
--------------------------------------------------------------*/ #}

{# /*--------------------------------------------------------------
    Step 1: Validate execution context (only run for the current model)
--------------------------------------------------------------*/ #}
{% if not execute or model is not defined or model.name != model_name %}
    {{ log("Skipping purge — not executing or different model context (" ~ model_name ~ ").", info=True) }}
    {% do return(none) %}
{% endif %}

{# /*--------------------------------------------------------------
    Step 2: Locate the model node safely (dbt 1.8+ compatible)
--------------------------------------------------------------*/ #}
{% if execute and graph is defined and 'nodes' in graph %}
    {% set node = graph.nodes.values() | selectattr('name', 'equalto', model_name) | first %}
{% else %}
    {% set node = context.get('model', none) %}
{% endif %}

{% if not node %}
    {{ exceptions.raise_compiler_error("Could not locate model node for: " ~ model_name) }}
{% endif %}

{# /*--------------------------------------------------------------
    Step 3: Retrieve RCC metadata from model config
--------------------------------------------------------------*/ #}
{% set rcc_code = node.config.get('rcc_code') %}
{% set purge_date_field = node.config.get('purge_date_field', 'cosmosingestedat') %}

{% if not rcc_code %}
    {{ log("No RCC code defined for model: " ~ model_name ~ ". Skipping purge.", info=True) }}
    {% do return(none) %}
{% endif %}

{# /*--------------------------------------------------------------
    Step 4: Lookup retention rule from registered dependency table
--------------------------------------------------------------*/ #}
{% set retention_query %}
    SELECT ruleperiod, periodunitcode
    FROM {{ ref('88057_jade_data_retention') }}
    WHERE classcode = '{{ rcc_code }}'
      AND retentionclasscodestatus = 'Active'
{% endset %}

{% set retention = run_query(retention_query) %}

{% if retention is none or retention.rows | length == 0 %}
    {{ exceptions.raise_compiler_error("No retention record found for RCC: " ~ rcc_code) }}
{% endif %}

{% set ruleperiod = retention.rows[0][0] %}
{% set unit_code = retention.rows[0][1] %}

{# /*--------------------------------------------------------------
    Step 5: Translate unit code to Trino interval
--------------------------------------------------------------*/ #}
{% set unit_map = {'D': 'DAY', 'M': 'MONTH', 'Y': 'YEAR'} %}
{% set unit = unit_map.get(unit_code, 'DAY') %}

{# /*--------------------------------------------------------------
    Step 6: Construct fully qualified table name
--------------------------------------------------------------*/ #}
{% set full_table_name = node.database ~ '.' ~ node.schema ~ '."' ~ node.name ~ '"' %}

{{ log("RCC purge configuration for " ~ model_name ~ ": RCC=" ~ rcc_code ~
       ", ruleperiod=" ~ ruleperiod ~ ", unit=" ~ unit ~
       ", purge_date_field=" ~ purge_date_field, info=True) }}

{{ log("Target table: " ~ full_table_name, info=True) }}

{# /*--------------------------------------------------------------
    Step 7: Identify records eligible for purge
--------------------------------------------------------------*/ #}
{% set eligible_count_query %}
    SELECT COUNT(*) AS cnt
    FROM {{ full_table_name }}
    WHERE {{ purge_date_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' {{ unit }}
{% endset %}

{% set eligible_result = run_query(eligible_count_query) %}
{% set eligible_count = eligible_result.rows[0][0] if eligible_result and eligible_result.rows|length > 0 else 0 %}
{{ log("Rows eligible for deletion: " ~ eligible_count, info=True) }}

{# /*--------------------------------------------------------------
    Step 8: Delete or log based on execute_delete flag
--------------------------------------------------------------*/ #}
{% if execute_delete and eligible_count > 0 %}
    {% set delete_sql %}
        DELETE FROM {{ full_table_name }}
        WHERE {{ purge_date_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' {{ unit }}
    {% endset %}
    {{ log("Executing DELETE on table " ~ full_table_name, info=True) }}
    {% do run_query(delete_sql) %}
    {{ log("✅ Purge completed for model: " ~ model_name, info=True) }}
{% elif not execute_delete %}
    {{ log("Dry run only — no DELETE executed (set execute_delete=True to purge).", info=True) }}
{% else %}
    {{ log("ℹ️ No records eligible for purge for model: " ~ model_name, info=True) }}
{% endif %}

{% endmacro %}
