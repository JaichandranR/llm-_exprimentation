import com.amazonaws.services.lambda.runtime.events.SQSEvent;
import com.fasterxml.jackson.core.JsonProcessingException;
import net.jpmchase.csorion.Handler;
import net.jpmchase.csorion.message.DatasetAvailability;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import software.amazon.awssdk.services.sfn.SfnClient;
import software.amazon.awssdk.services.sfn.model.SendTaskSuccessRequest;
import software.amazon.awssdk.services.sfn.model.TaskDoesNotExistException;
import software.amazon.awssdk.services.ssm.SsmClient;
import software.amazon.awssdk.services.ssm.model.*;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBLockClient;
import com.amazonaws.services.dynamodbv2.LockItem;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

public class HandlerTest {

    @Mock
    private SsmClient ssmClient;

    @Mock
    private SfnClient sfnClient;

    @Mock
    private AmazonDynamoDBLockClient dynamoDBLockClient;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private Handler handler;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        handler = new Handler(objectMapper, ssmClient, sfnClient, dynamoDBLockClient,
                "AVAILABLE", 10L, 10L, "ssm/prefix/", "-", "--", "-|-");
    }

    private SQSEvent createEvent() {
        SQSEvent event = new SQSEvent();
        SQSEvent.SQSMessage msg = new SQSEvent.SQSMessage();
        msg.setBody("{\"dataType\":\"raw\",\"dataSource\":\"source\",\"dataset\":\"dataset1\"}");
        event.setRecords(List.of(msg));
        return event;
    }

    private void mockSsmGetParametersByPath(List<Parameter> params) {
        GetParametersByPathResponse response = GetParametersByPathResponse.builder()
                .parameters(params).build();
        when(ssmClient.getParametersByPath(any(GetParametersByPathRequest.class))).thenReturn(response);
    }

    private Parameter createParameter(String name) {
        return Parameter.builder().name(name).build();
    }

    @Test
    public void testHandlerInstantiation() {
        assertNotNull(handler);
    }

    @Test
    public void testNoBlockingParametersFound() throws Exception {
        when(objectMapper.readValue(anyString(), eq(DatasetAvailability.class)))
                .thenReturn(new DatasetAvailability("raw", "source", "dataset1", "2025-08-12T17:51:31.770Z"));
        mockSsmGetParametersByPath(Collections.emptyList());

        handler.accept(createEvent());

        verify(dynamoDBLockClient, never()).acquireLock(any());
    }

    @Test
    public void testBlockingParameterWithEmptyToken() throws Exception {
        when(objectMapper.readValue(anyString(), eq(DatasetAvailability.class)))
            .thenReturn(new DatasetAvailability("raw", "source", "dataset1", "AVAILABLE", "2025-08-12T17:51:31.770Z"));
    
        mockSsmGetParametersByPath(List.of(createParameter("blockingParam")));
    
        when(ssmClient.getParameter(any(GetParameterRequest.class)))
            .thenReturn(GetParameterResponse.builder()
                .parameter(Parameter.builder().value(" ").build())
                .build());
    
        handler.accept(createEvent());
    
        verify(sfnClient, never()).sendTaskSuccess(any(SendTaskSuccessRequest.class));
    }


    @Test
    public void testSendTaskSuccessThrowsException() throws Exception {
        when(objectMapper.readValue(anyString(), eq(DatasetAvailability.class)))
                .thenReturn(new DatasetAvailability("raw", "source", "dataset1", "2025-08-12T17:51:31.770Z"));
        mockSsmGetParametersByPath(List.of(createParameter("blockingParam")));
        when(ssmClient.getParameter(any(GetParameterRequest.class)))
                .thenReturn(Parameter.builder().value("token").build());
        doThrow(new TaskDoesNotExistException("msg")).when(sfnClient).sendTaskSuccess(any());

        handler.accept(createEvent());

        verify(ssmClient, atLeastOnce()).putParameter(any(PutParameterRequest.class));
    }

    @Test
    public void testInterruptedExceptionDuringLock() throws Exception {
        when(objectMapper.readValue(anyString(), eq(DatasetAvailability.class)))
                .thenReturn(new DatasetAvailability("raw", "source", "dataset1", "2025-08-12T17:51:31.770Z"));
        mockSsmGetParametersByPath(List.of(createParameter("blockingParam")));
        when(dynamoDBLockClient.acquireLock(any())).thenThrow(new InterruptedException());

        assertThrows(RuntimeException.class, () -> handler.accept(createEvent()));
    }

    @Test
    public void testReleaseLockFails() throws Exception {
        when(objectMapper.readValue(anyString(), eq(DatasetAvailability.class)))
                .thenReturn(new DatasetAvailability("raw", "source", "dataset1", "2025-08-12T17:51:31.770Z"));
        mockSsmGetParametersByPath(List.of(createParameter("blockingParam")));
        LockItem lock = mock(LockItem.class);
        when(dynamoDBLockClient.acquireLock(any())).thenReturn(lock);
        when(dynamoDBLockClient.releaseLock(lock)).thenReturn(false);

        handler.accept(createEvent());

        verify(dynamoDBLockClient).releaseLock(lock);
    }

    @Test
    public void testJsonProcessingException() throws Exception {
        when(objectMapper.readValue(anyString(), eq(DatasetAvailability.class)))
                .thenThrow(new JsonProcessingException("bad json") {});

        handler.accept(createEvent());

        verifyNoInteractions(ssmClient, sfnClient);
    }
}
