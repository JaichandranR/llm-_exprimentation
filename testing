{% macro purge_by_rcc(model_name, execute_delete=False) %}
{# /*
Macro: purge_by_rcc

Purpose:
1. Checks RCC configuration for the given model.
2. Finds the retention rule from 88057_jade_data_retention using adapter.get_relation().
3. Identifies rows exceeding retention period using purge_date_field.
4. Optionally deletes eligible rows if execute_delete=True.

Usage:
- CLI: dbt run-operation purge_by_rcc --args "{\"model_name\": \"110930_ame_co_driver\", \"execute_delete\": true}"
- Hook: {{ purge_by_rcc(model_name=this.name, execute_delete=True) }}
*/ #}

    {# /* Handle both contexts — pre-hook vs CLI */ #}
    {% if execute('graph') %}
        {% set node = graph.nodes.values() | selectattr('name', 'equalto', model_name) | first %}
    {% else %}
        {# in pre-hook context, use `this` directly #}
        {% set node = this %}
    {% endif %}

    {% if not node %}
        {{ exceptions.raise_compiler_error("Unable to resolve model node for: " ~ model_name) }}
    {% endif %}

    {# /* Retrieve configuration safely */ #}
    {% set rcc_code = node.config.get('rcc_code') if node.config is defined else config.get('rcc_code') %}
    {% set purge_date_field = node.config.get('purge_date_field', 'cosmosingestedat') if node.config is defined else config.get('purge_date_field', 'cosmosingestedat') %}

    {% if not rcc_code %}
        {{ exceptions.raise_compiler_error("No RCC code defined for model: " ~ model_name) }}
    {% endif %}

    {# /* Resolve retention table directly using adapter */ #}
    {% set retention_table = adapter.get_relation(
        database=target.database,
        schema=target.schema,
        identifier='88057_jade_data_retention'
    ) %}

    {% if retention_table is none %}
        {{ exceptions.raise_compiler_error("Retention table '88057_jade_data_retention' not found in target environment.") }}
    {% endif %}

    {# /* Lookup retention rule */ #}
    {% set retention_query %}
        SELECT ruleperiod, periodunitcode
        FROM {{ retention_table }}
        WHERE classcode = '{{ rcc_code }}'
          AND retentionclasscodestatus = 'Active'
    {% endset %}

    {% set retention = run_query(retention_query) %}
    {% if retention is none or retention.rows | length == 0 %}
        {{ exceptions.raise_compiler_error("No retention record found for RCC " ~ rcc_code) }}
    {% endif %}

    {% set ruleperiod = retention.rows[0][0] %}
    {% set unit_code = retention.rows[0][1] %}

    {# /* Unit mapping */ #}
    {% set unit_map = {'D': 'DAY', 'M': 'MONTH', 'Y': 'YEAR'} %}
    {% set unit = unit_map.get(unit_code, 'DAY') %}

    {# /* Construct table reference safely */ #}
    {% if node.database is defined and node.schema is defined %}
        {% set full_table_name = node.database ~ '.' ~ node.schema ~ '."' ~ node.name ~ '"' %}
    {% else %}
        {% set full_table_name = this.database ~ '.' ~ this.schema ~ '."' ~ this.name ~ '"' %}
    {% endif %}

    {{ log("RCC purge configuration for " ~ model_name ~ ": RCC=" ~ rcc_code ~
           ", ruleperiod=" ~ ruleperiod ~ ", unit=" ~ unit ~
           ", purge_date_field=" ~ purge_date_field, info=True) }}
    {{ log("Target table: " ~ full_table_name, info=True) }}

    {# /* Eligible row count */ #}
    {% set eligible_count_query %}
        SELECT COUNT(*) AS cnt
        FROM {{ full_table_name }}
        WHERE {{ purge_date_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' {{ unit }}
    {% endset %}

    {% set eligible_result = run_query(eligible_count_query) %}
    {% set eligible_count = eligible_result.rows[0][0] if eligible_result and eligible_result.rows|length > 0 else 0 %}
    {{ log("Rows eligible for deletion: " ~ eligible_count, info=True) }}

    {% if execute_delete and eligible_count > 0 %}
        {% set delete_sql %}
            DELETE FROM {{ full_table_name }}
            WHERE {{ purge_date_field }} < CURRENT_DATE - INTERVAL '{{ ruleperiod }}' {{ unit }}
        {% endset %}
        {{ log("Executing DELETE on table " ~ full_table_name, info=True) }}
        {% do run_query(delete_sql) %}
        {{ log("✅ Purge completed for model: " ~ model_name, info=True) }}
    {% elif not execute_delete %}
        {{ log("Dry run only: no DELETE executed (set execute_delete=True to purge).", info=True) }}
    {% else %}
        {{ log("ℹ️ No records eligible for purge for model: " ~ model_name, info=True) }}
    {% endif %}

{% endmacro %}
