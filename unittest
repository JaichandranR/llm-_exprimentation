import unittest
from unittest.mock import patch, MagicMock

import sys
sys.modules['awsglue'] = MagicMock()
sys.modules['awsglue.context'] = MagicMock()
sys.modules['awsglue.utils'] = MagicMock()
sys.modules['pyspark'] = MagicMock()
sys.modules['pyspark.context'] = MagicMock()

# Now import the real module under test
from src.main.python.common_data_sync import copy_tables, summary_table

class TestCommonDataSync(unittest.TestCase):

    @patch("src.main.python.common_data_sync.boto3.client")
    @patch("src.main.python.common_data_sync.getResolvedOptions")
    @patch("src.main.python.common_data_sync.SparkContext")
    @patch("src.main.python.common_data_sync.GlueContext")
    def test_copy_tables_successful(self, mock_glue_context, mock_spark_context, mock_get_resolved, mock_boto3_client):
        mock_get_resolved.return_value = {
            'source_db': 'source_db_name',
            'target_db': 'target_db_name',
            's3_bucket': 'mock-bucket',
            'region': 'us-east-1'
        }

        mock_paginator = MagicMock()
        mock_paginator.paginate.return_value = [[
            {
                'Name': 'test_table',
                'StorageDescriptor': {
                    'Location': 's3://mock-location/',
                    'Columns': [],
                    'SerdeInfo': {}
                },
                'PartitionKeys': [],
                'Parameters': {
                    'classification': 'json',
                    'table_type': 'OTHER',
                    'metadata_location': 's3://mock-location/table/metadata'
                }
            }
        ]]

        mock_glue = MagicMock()
        mock_glue.get_paginator.return_value = mock_paginator
        mock_boto3_client.return_value = mock_glue

        with patch("src.main.python.common_data_sync.create_or_update_table") as mock_create_update, \
             patch("src.main.python.common_data_sync.sync_table_partitions") as mock_sync_parts, \
             patch("src.main.python.common_data_sync.delete_orphan_tables") as mock_delete_orphan:

            mock_create_update.return_value = None
            mock_sync_parts.return_value = None
            mock_delete_orphan.return_value = None

            copy_tables()

        self.assertEqual(summary_table['processed_tables'], 1)
        self.assertEqual(summary_table['failed_tables'], 0)
        self.assertEqual(summary_table['deleted_tables'], 0)
        self.assertEqual(summary_table['errors'], [])

    @patch("src.main.python.common_data_sync.boto3.client")
    def test_missing_metadata_location(self, mock_boto3_client):
        paginator = MagicMock()
        paginator.paginate.return_value = [[
            {
                'Name': 'test_table',
                'StorageDescriptor': {
                    'Columns': [],
                    'SerdeInfo': {}
                },
                'PartitionKeys': [],
                'Parameters': {}  # missing metadata_location
            }
        ]]
        mock_glue = MagicMock()
        mock_glue.get_paginator.return_value = paginator
        mock_boto3_client.return_value = mock_glue

        summary_table['processed_tables'] = 0
        summary_table['failed_tables'] = 0
        summary_table['deleted_tables'] = 0
        summary_table['errors'] = []

        with patch("src.main.python.common_data_sync.getResolvedOptions", return_value={
            'source_db': 'source_db_name',
            'target_db': 'target_db_name',
            's3_bucket': 'mock-bucket',
            'region': 'us-east-1'
        }), patch("src.main.python.common_data_sync.SparkContext"), patch("src.main.python.common_data_sync.GlueContext"):
            copy_tables()

        self.assertEqual(summary_table['failed_tables'], 1)
        self.assertTrue(any("Missing location" in err['error'] for err in summary_table['errors']))

if __name__ == "__main__":
    unittest.main()
