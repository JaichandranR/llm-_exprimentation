import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import net.jpmchase.csorion.Handler;
import net.jpmchase.csorion.message.IncomingRequestFromSF;
import net.jpmchase.csorion.message.ResponsebacktoStepFnJson;
import net.jpmchase.csorion.message.TrinoResponseJson;
import net.jpmchase.csorion.config.service.RequestHandlerClientServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

public class HandlerTest {

    @Mock
    private RequestHandlerClientServiceImpl requestHandlerClientServiceImpl;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private Handler handler;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    private TrinoResponseJson mockTrinoResponse(String state, String nextUri) {
        TrinoResponseJson trinoResp = mock(TrinoResponseJson.class);
        TrinoResponseJson.Stats stats = mock(TrinoResponseJson.Stats.class);
        when(stats.getState()).thenReturn(state);
        when(trinoResp.getStats()).thenReturn(stats);
        when(trinoResp.getNextUri()).thenReturn(nextUri);
        return trinoResp;
    }

    @Test
    public void testApply_WithQuery_Success() throws Exception {
        IncomingRequestFromSF incoming = mock(IncomingRequestFromSF.class);
        when(incoming.getQuery()).thenReturn("SELECT 1");
        when(objectMapper.readValue(any(String.class), eq(IncomingRequestFromSF.class)))
            .thenReturn(incoming);

        when(requestHandlerClientServiceImpl.PostQueryToTrino("SELECT 1"))
            .thenReturn("{\"stats\":{\"state\":\"SUCCEEDED\"},\"nextUri\":\"uri\"}");

        when(objectMapper.readValue(any(String.class), eq(TrinoResponseJson.class)))
            .thenReturn(mockTrinoResponse("SUCCEEDED", "uri"));

        ResponseEntity<ResponsebacktoStepFnJson> result = handler.apply("{}");

        assertEquals(HttpStatus.OK, result.getStatusCode());
        verify(requestHandlerClientServiceImpl).PostQueryToTrino("SELECT 1");
    }

    @Test
    public void testApply_NoQuery_Success() throws Exception {
        IncomingRequestFromSF incoming = mock(IncomingRequestFromSF.class);
        when(incoming.getQuery()).thenReturn(null);
        when(incoming.getNextUri()).thenReturn("uri");
        when(objectMapper.readValue(any(String.class), eq(IncomingRequestFromSF.class)))
            .thenReturn(incoming);

        when(requestHandlerClientServiceImpl.GetDataStoreFromTrino("uri"))
            .thenReturn("{\"stats\":{\"state\":\"SUCCEEDED\"},\"nextUri\":\"uri2\"}");

        when(objectMapper.readValue(any(String.class), eq(TrinoResponseJson.class)))
            .thenReturn(mockTrinoResponse("SUCCEEDED", "uri2"));

        ResponseEntity<ResponsebacktoStepFnJson> result = handler.apply("{}");

        assertEquals(HttpStatus.OK, result.getStatusCode());
        verify(requestHandlerClientServiceImpl).GetDataStoreFromTrino("uri");
    }

    @Test
    public void testApply_TrinoStateNotOk() throws Exception {
        IncomingRequestFromSF incoming = mock(IncomingRequestFromSF.class);
        when(incoming.getQuery()).thenReturn("SELECT 1");
        when(objectMapper.readValue(any(String.class), eq(IncomingRequestFromSF.class)))
            .thenReturn(incoming);

        when(requestHandlerClientServiceImpl.PostQueryToTrino(anyString()))
            .thenReturn("{\"stats\":{\"state\":\"FAILED\"}}");

        when(objectMapper.readValue(any(String.class), eq(TrinoResponseJson.class)))
            .thenReturn(mockTrinoResponse("FAILED", null));

        ResponseEntity<ResponsebacktoStepFnJson> result = handler.apply("{}");

        assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());
    }

    @Test
    public void testApply_JsonProcessingException_OnIncoming() throws Exception {
        when(objectMapper.readValue(any(String.class), eq(IncomingRequestFromSF.class)))
            .thenThrow(new JsonProcessingException("bad json") {});

        assertThrows(RuntimeException.class, () -> handler.apply("{}"));
    }

    @Test
    public void testApply_JsonProcessingException_OnTrinoResponse() throws Exception {
        IncomingRequestFromSF incoming = mock(IncomingRequestFromSF.class);
        when(incoming.getQuery()).thenReturn("SELECT 1");
        when(objectMapper.readValue(any(String.class), eq(IncomingRequestFromSF.class)))
            .thenReturn(incoming);

        when(requestHandlerClientServiceImpl.PostQueryToTrino(anyString()))
            .thenReturn("{}");

        when(objectMapper.readValue(any(String.class), eq(TrinoResponseJson.class)))
            .thenThrow(new JsonProcessingException("bad json") {});

        assertThrows(RuntimeException.class, () -> handler.apply("{}"));
    }
}
