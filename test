# MITRE Technique Predictor

## Overview
The MITRE Technique Predictor project analyzes and predicts MITRE ATT&CK techniques using a Streamlit-based application. This application processes user inputs, generates embeddings, and performs similarity searches on a PostgreSQL database with the help of the `pgvector` extension.

## Prerequisites
Before running the application, ensure the following prerequisites are met:

- Python 3.8 or higher is installed.
- PostgreSQL instance is configured with the `pgvector` extension.
- AWS credentials are set up for connecting to the RDS instance using IAM authentication.
- Required Python dependencies are installed.

## Folder Structure
```
hackathon_threatconnect_llm_poc/
├── MITRE_tech/                  # Folder containing CSV files for MITRE data
├── mitre_technique_predictor/   # Main application folder
│   ├── __init__.py
│   ├── __main__.py
│   ├── generate_embedding.py   # Script to process CSVs and populate PostgreSQL
│   ├── summary_generate.py     # Streamlit application
├── config.json                  # Configuration file for environment variables
├── requirements.txt             # Python dependencies
└── README.md                    # Documentation
```

## Configuration
The `config.json` file contains the database and API configurations. Replace placeholders with actual values:

```json
{
  "DOMAIN": "naeast",
  "ROLE_ARN": "arn:aws:iam::ROLE/90177-aurora-app-admin",
  "ENDPOINT": "proxy-postgres-nlb.elb.us-east-1.amazonaws.com",
  "CLUSTER": "aurora-cluster.cluster-c1wayscsgqcd.us-east-1.rds.amazonaws.com",
  "PORT": "6160",
  "REGION": "us-east-1",
  "DBNAME": "llmdb",
  "API_URL": "http://your-eks-hosted-url",
  "API_KEY": "3g7h1e9a5b0d2f81a4c6"
}
```

## Running the Application

### 1. Generate Embeddings
Use the `generate_embedding.py` script to process CSV files and populate the PostgreSQL database:

```bash
python mitre_technique_predictor/generate_embedding.py --userid <your_userid>
```

### 2. Launch Streamlit Application
Run the Streamlit app for similarity search and summarization:

```bash
streamlit run mitre_technique_predictor/summary_generate.py --userid <your_userid>
```

### 3. Access the Application
Once the Streamlit app is running, open your browser and navigate to the URL provided in the terminal (e.g., `http://localhost:8501`).

## Deployment on EKS
To deploy the application on Amazon EKS:

1. **Create Docker Image**
   Build and push the Docker image containing the application and dependencies.

   ```bash
   docker build -t <your_docker_repo>:latest .
   docker push <your_docker_repo>:latest
   ```

2. **Deploy on EKS**
   Apply Kubernetes manifests for deploying the application as a pod and exposing it via a LoadBalancer.

   ```bash
   kubectl apply -f k8s/deployment.yaml
   kubectl apply -f k8s/service.yaml
   ```

3. **Access the Application**
   Retrieve the LoadBalancer URL to access the Streamlit app.

   ```bash
   kubectl get services
   ```

## Key Features
- Embedding generation using the `bge-large-en-v1.5` model.
- Similarity search directly in PostgreSQL using `pgvector`.
- Summarization of context with key MITRE techniques.

## Future Enhancements
- Support for additional LLM models.
- Integration with cloud-based vector search databases.
- Enhanced UI/UX for the Streamlit application.

## Contributing
Contributions are welcome! Please fork the repository and submit a pull request with your changes.

## License
This project is licensed under the MIT License. See the LICENSE file for details.
