import boto3
from pyspark.sql import SparkSession
from botocore.exceptions import ClientError

# AWS Glue and Iceberg configuration
region_name = "us-east-1"
database_name = "common_data_dev"
table_name = "87674_verum_application"

# Initialize AWS Glue Client
glue_client = boto3.client("glue", region_name=region_name)

# Step 1: Check if Table Exists
try:
    response = glue_client.get_table(DatabaseName=database_name, Name=table_name)
    print(f"âœ… Table Found: {response['Table']['Name']}")
except glue_client.exceptions.EntityNotFoundException:
    print("[ERROR] Table does not exist in Glue Catalog.")
    exit(1)
except ClientError as e:
    print(f"[ERROR] AWS Client Error: {e}")
    exit(1)

# Step 2: Initialize Spark with Iceberg Support
try:
    spark = SparkSession.builder \
        .appName("GlueIcebergQuery") \
        .config("spark.sql.catalog.glue_catalog", "org.apache.iceberg.spark.SparkCatalog") \
        .config("spark.sql.catalog.glue_catalog.catalog-impl", "org.apache.iceberg.aws.glue.GlueCatalog") \
        .config("spark.sql.catalog.glue_catalog.warehouse", "s3://your-glue-warehouse-bucket/") \
        .config("spark.sql.extensions", "org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions") \
        .getOrCreate()

    # Define Iceberg table path
    iceberg_table = f"glue_catalog.{database_name}.{table_name}"

    print(f"\nðŸ“Œ Fetching first 10 rows from Iceberg table: {iceberg_table}")

    # Read table
    df = spark.read.format("iceberg").load(iceberg_table)

    # Show first 10 records
    df.show(10, truncate=False)

except Exception as e:
    print(f"[ERROR] An unexpected error occurred while fetching records: {e}")
