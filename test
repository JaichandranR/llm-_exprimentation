from pyspark.sql import SparkSession
from datetime import datetime

def extract_and_store_iceberg_metadata(
    spark: SparkSession,
    catalog_name: str,
    database_name: str,
    source_table_name: str,
    audit_table_name: str,
):
    full_table_name = f"{catalog_name}.{database_name}.{source_table_name}"
    try:
        # Read snapshots
        snapshots_df = spark.sql(f"SELECT * FROM `{full_table_name}$snapshots`")
        print(f"✅ Found {snapshots_df.count()} snapshot(s)")

        # Read metadata log entries
        metadata_df = spark.sql(f"SELECT * FROM `{full_table_name}$metadata_log_entries`")
        latest_metadata = metadata_df.orderBy("timestamp_ms", ascending=False).first()
        metadata_path = latest_metadata["metadata_file"] if latest_metadata else None

        # Read manifests
        manifests_df = spark.sql(f"SELECT * FROM `{full_table_name}$manifests`")
        partition_spec_ids = manifests_df.select("partition_spec_id").distinct().rdd.flatMap(lambda x: x).collect()

        # Collect final rows
        rows = []
        for row in snapshots_df.collect():
            rows.append({
                "table_name": source_table_name,
                "snapshot_id": row["snapshot_id"],
                "parent_id": row["parent_id"],
                "committed_at": row["committed_at"],
                "operation": row["operation"],
                "manifest_list": row["manifest_list"],
                "summary": row["summary"],
                "schema_id": row["schema_id"],
                "metadata_file": metadata_path,
                "partition_spec_ids": partition_spec_ids,
                "extracted_at": datetime.utcnow().isoformat()
            })

        # Write to audit table
        if rows:
            audit_df = spark.createDataFrame(rows)
            audit_df.writeTo(f"{catalog_name}.{database_name}.{audit_table_name}").using("iceberg").createOrReplace()
            print("✅ Snapshot + manifest metadata written to audit table.")
        else:
            print("⚠️ No metadata found to write.")

    except Exception as e:
        print(f"❌ Failed to extract metadata from Iceberg table {full_table_name}: {e}")
